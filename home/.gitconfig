# Settings {{{1
[use]
  name = Florian Schroedl
[user]
  email = hello@florianschroedl.com
  name = Florian Schroedl
[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = true
  pager = true
[color "status"]
  added = green
  changed = yellow
  untracked = red
[core]
  ignorecase = false
  editor = "nvim"
  excludesfile = ~/.gitignore_global
[credential]
  helper = osxkeychain
  pager = less -FRSX
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
[difftool "Kaleidoscope"]
  cmd = ksdiff-wrapper git \"$LOCAL\" \"$REMOTE\"
[difftool]
  prompt = false
[diff]
  tool = Kaleidoscope
[push]
  default = matching
# }}} 1
# Aliases # {{{1
[alias]
  # Git log / analytics {{{2

  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --graphgl # Short git message with date, commit author,
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat # Log with the changed files
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short # List showing date stamps
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative # List with hour timestamp
  lnc = log --pretty=format:"%h\\ %s\\ [%cn]" # List with no colors (For Unix pipes)

  fl = log -u # Show the history of a file

  # Git Commit Stats
  stats = shortlog -sn --all --no-merges
  quarterstats = shortlog -sn --since='10 weeks' --until='2 weeks'

  # 10 last worked on branches
  recent = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(refname:short)"

  # What everybody has been doing in the last 2 weeks
  overview = log --all --since='2 weeks' --oneline --no-merges

  # What you have been doing in the last 2 weeks
  recap = "!git log --all --oneline --no-merges --author=$(git config user.email)"

  today = "! git log --since=00:00:00 --all --no-merges --oneline --author=$(git config user.email)"

  # }}}2
  # Commit {{{2

  # Assume
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
  assumeall = "!git status -s | awk {'print $2'} | xargs git assume"

  # Easily solve merge conflicts from the command line
  # [merge - Simple tool to 'accept theirs' or 'accept mine' on a whole file using git - Stack Overflow]
  # (http://stackoverflow.com/questions/914939/simple-tool-to-accept-theirs-or-accept-mine-on-a-whole-file-using-git/11843922#11843922)
  accept-ours = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --ours -- $files; git add -u $files; }; f"
  accept-theirs = "!f() { files=\"$@\"; [ -z $files ] && files='.'; git checkout --theirs -- $files; git add -u $files; }; f"

  # }}}2
  # Fetch / Clone {{{2

  # Execute a fetch on all the remotes you have configured
  fetchall = !bash -c 'source /etc/bash_completion.d/git &amp;&amp; __git_remotes | xargs --no-run-if-empty -t -n1 git fetch $*' -

  # }}}2
  # Git Extras {{{2

  feat = feature

  # }}}2
  # Vim {{{2

  # Open files in index in vim
  openChanged = "! nvim `git status -s -uno --porcelain |awk '{print $2}'`"

  # }}}2
# }}}1
# LFS # {{{1
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
# }}}1
