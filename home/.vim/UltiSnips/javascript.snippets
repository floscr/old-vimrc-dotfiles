# ---------
# Functions
# ---------

snippet fun
function ${1:myFunction}(${2:args}) {
$0
}
endsnippet

snippet vfun
var $1 = function($2) {
$0
}
endsnippet

# -----
# LOOPS
# -----

snippet fe
${1:arr}.forEach((${2}) => {
  $0
});
endsnippet

snippet for
for (let i = 0; i < ${1:var.length}; ${2:i++}) {
  $0
}
endsnippet

# ------------
# CONDITIONALS
# ------------

# if
snippet if
if (${1:true}) {
${0}
}
endsnippet

# if ... else
snippet ife
if (${1:true}) {
${2}
} else {
${0}
}
endsnippet

# tertiary conditional
snippet ter
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

# ----
# NODE
# ----

snippet re "require" b
var `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub('[_\-]', '', lastPart.title())
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet

# snippet req
# require('$1');$0
# endsnippet

snippet vreq
var ${1} = require('${2:$1}');$0
endsnippet

snippet me "module.exports" b
module.exports = ${1:`!p snip.rv = ''.join(x.title() for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`};$0
endsnippet

snippet shebang
#!/usr/bin/env node
endsnippet

# Documentation

# docstring
snippet /**
/**
 * ${0:description}
 */
endsnippet

snippet @par
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret
@return {${1:type}} ${0:description}
endsnippet


# --------------
# Query selector
# --------------

snippet get
getElementsBy${1:TagName}('${0}')
endsnippet
snippet by.
${1:document}.getElementsByClassName('${0:class}')
endsnippet
# Element by ID
snippet by#
${1:document}.getElementById('${0:element ID}')
endsnippet
snippet gid
${1:document}.getElementById('${0:element ID}')
endsnippet
# Query selector
snippet qs
${1:document}.querySelector('${0:CSS selector}')
endsnippet
# Query selector all
snippet qsa
${1:document}.querySelectorAll('${0:CSS selector}')
endsnippet

# ---------
# Debugging
# ---------
snippet de
debugger;
endsnippet
# console.log
snippet cl
console.log(${0});
endsnippet
# console.debug
snippet cd
console.debug(${0});
endsnippet
# console.error
snippet ce
console.error(${0});
endsnippet
# console.trace
snippet ct
console.trace(${0:label});
endsnippet
# console.time
snippet ctime
console.time(${0:label});
endsnippet
# console.assert
snippet ca
console.assert(${1:expression}, ${0:obj});
endsnippet
# console.dir
snippet cdir
console.dir(${0:obj});
endsnippet

# ------------
# Task Runners
# ------------

snippet gulp
gulp.task('${1:task}', function() {
  return gulp.src('${2:src}')
    .pipe(gulp.dest('${3:dst}'));
});
endsnippet

snippet gulpwatch
gulp.task('watch', function() {
  return gulp.watch('${1:./src/*}', ['${2:task}']);
});
endsnippet

# ----
# Misc
# ----

snippet IFIE
(function() {
  ${1}
})();
endsnippet

# 'use strict';
snippet us
'use strict';
endsnippet

# setTimeout function
snippet timeout
setTimeout(function () {${0}}${2}, ${1:10});
endsnippet

snippet onkey
document.onkeydown = function(event) {
$1
}
endsnippet
