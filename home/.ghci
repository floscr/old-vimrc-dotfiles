-- Original https://gist.github.com/Pitometsu/f136489d3a203a2dd848
-- Prompt {{{
:set prompt "\001\ESC[33m\002λ \001\ESC[01;34m\002> \001\ESC[m\002\STX"
:set prompt2 "\001\ESC[33m\002λ \001\ESC[01;31m\002| \001\ESC[m\002\STX"
--- }}}

-- -- OverloadedStrings is often useful.
-- :set -XOverloadedStrings
--
-- -- Scoped type variables is often useful so we can specify the types
-- -- of variables (for example, in lambda expressions).
-- :set -XScopedTypeVariables
--
-- -- Import Prelude.  Some projects don't import the Prelude by default, but
-- -- we are using types and functions from the Prelude in the following hoogle
-- -- function definition, so we need to make sure that Prelude is imported.
-- import Prelude
--
-- -- give us a `hoogle` function to if the hoogle binary is available.
-- -- :def hoogle \s -> return $ ":! hoogle --count=15 \"" ++ s ++ "\""
-- let escape arg = "'" ++ ((\c -> if c == '\'' then "'\"'\"'" else [c]) =<< arg) ++"'"
-- :def! search return . (":!hoogle --count=50 --color " ++) . escape
-- :def! doc return . (":!hoogle --count=50 --color --info " ++) . escape
--
-- -- Show the types of evaluated expressions
-- :set +t
--
-- -- Enable multi-line expressions with :{ and :}
-- :set +m
--
-- -- Pretty-printing values
-- import qualified Language.Haskell.HsColour ( ColourPrefs(..) )
--
-- let
--   funnyPrint :: (Show a) => a -> IO ()
--   funnyPrint = let
--                  con :: String -> String
--                  con [] = []
--                  con li@(x:xs) | x == '\"' = '\"':str ++ "\"" ++ (con rest)
--                                | x == '\'' = '\'':char:'\'':(con rest')
--                                | otherwise = x:con xs where
--                                  (str,rest):_   = reads li :: [(String, String)]
--                                  (char,rest'):_ = reads li :: [(Char,   String)]
--                  prefs = Language.Haskell.HsColour.TTYg
--                          Language.Haskell.HsColour.Output.XTerm256Compatible
--                  colours = let
--                              black   = Language.Haskell.HsColour.Colourise.Foreground
--                                        Language.Haskell.HsColour.Colourise.Black
--                              red     = Language.Haskell.HsColour.Colourise.Foreground
--                                        Language.Haskell.HsColour.Colourise.Red
--                              green   = Language.Haskell.HsColour.Colourise.Foreground
--                                        Language.Haskell.HsColour.Colourise.Green
--                              yellow  = Language.Haskell.HsColour.Colourise.Foreground
--                                        Language.Haskell.HsColour.Colourise.Yellow
--                              blue    = Language.Haskell.HsColour.Colourise.Foreground
--                                        Language.Haskell.HsColour.Colourise.Blue
--                              magenta = Language.Haskell.HsColour.Colourise.Foreground
--                                        Language.Haskell.HsColour.Colourise.Magenta
--                              cyan    = Language.Haskell.HsColour.Colourise.Foreground
--                                        Language.Haskell.HsColour.Colourise.Cyan
--                              white   = Language.Haskell.HsColour.Colourise.Foreground
--                                        Language.Haskell.HsColour.Colourise.White
--                              bold    = Language.Haskell.HsColour.Colourise.Bold
--                            in
--                              Language.Haskell.HsColour.Colourise.defaultColourPrefs
--                    { Language.Haskell.HsColour.conid    = [ yellow
--                                                           , bold
--                                                           ]
--                    , Language.Haskell.HsColour.conop    = [ yellow ]
--                    , Language.Haskell.HsColour.string   = [ green ]
--                    , Language.Haskell.HsColour.char     = [ cyan ]
--                    , Language.Haskell.HsColour.number   = [ red
--                                                           , bold
--                                                           ]
--                    , Language.Haskell.HsColour.layout   = [ black ]
--                    , Language.Haskell.HsColour.keyglyph = [ black ]
--                    }
--                  colorize = Language.Haskell.HsColour.hscolour prefs colours False False "" False
--                in
--                  putStrLn . colorize . con . IPPrint.pshow
--
-- :module -Language.Haskell.HsColour
--
-- :def color (\_ -> return ":set -interactive-print=funnyPrint")
-- :def nocolor (\_ -> return ":set -interactive-print=print")
--
-- :color
