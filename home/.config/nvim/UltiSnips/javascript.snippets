extends vue
extends react
extends javascript.testing

# ES6 {{{
# -----------------------------------------------------------------------------

snippet im "ES6 Import"
import ${1:foo} from './$1';
endsnippet

snippet ex "ES6 Export Variable"
export ${1:default} ${2:bar}
endsnippet

snippet exdf "ES6 Export default Function"
export default function ${1:`!p snip.rv = snip.basename`} () {
  $0
}
endsnippet

snippet exf "ES6 Export Function"
export function ${1:`!p snip.rv = snip.basename`} () {
  $0
}
endsnippet

snippet exo "ES6 Export Default Object"
export default {
  $0
}
endsnippet

snippet exc "ES6 Export Default Class" b
export default class ${1:`!p snip.rv = snip.basename`} {

  constructor () {
    $0
  }

}
endsnippet

snippet c "ES6 Class Templates" b
class ${1:`!p snip.rv = snip.basename`} {

  constructor () {
    $0
  }

}
export default $1
endsnippet

# }}}
# Functions {{{
# -----------------------------------------------------------------------------

# \b - word boundary
# match string f or fun for function snippet
snippet "\bf(un)?" "Function Declaration" r
function ${1:myFunction} (${2:args}) {
  $0
}
endsnippet

snippet "\bcf(un)?" "Function Expression" r
const $1 = function ($2) {
$0
}
endsnippet

snippet r "Function return"
return (
$0
);
endsnippet

snippet > "Arrow Function"
(${1}) => {
  ${2}
}
endsnippet

# }}}
# Loops {{{
# -----------------------------------------------------------------------------

# Expand to new foreach loop
snippet fe "Foreach loop - no existing variable"
${1:arr}.forEach((${2}) => {
  $0
})
endsnippet

# Expand on .fe on existing obejct/array
snippet fe "Foreach loop on Existing" "re.match('^.*\.', snip.buffer[snip.line])" ie
forEach((${2}) => {
  $0
})
endsnippet

snippet for "For loop"
for (let i = 0; i < ${1:var.length}; ${2:i++}) {
  $0
}
endsnippet

snippet forof "Object property loop"
for (let ${1:s} of ${2:sequence}) {
  ${3}
}
endsnippet

# }}}
# Conditionals {{{
# -----------------------------------------------------------------------------

snippet if "Single if statement"
if (${1:true}) {
  ${0}
}
endsnippet

snippet ife "If Else Statement"
if (${1:true}) {
  ${2}
} else {
  ${0}
}
endsnippet

snippet ter "Ternary Statement"
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

# }}}
# Dom {{{
# -----------------------------------------------------------------------------

snippet domr "Document Ready Vanilla Javascript"
document.addEventListener('DOMContentLoaded', () => {
  $0
});
endsnippet

# }}}
# Node {{{
# -----------------------------------------------------------------------------

snippet re "require" b
const `!p
def formatVariableName(path):
	lastPart = path.split('/')[-1]
	if lastPart == 'underscore':
		return '_'
	elif lastPart == 'jquery':
		return '$'
	else:
		return re.sub('[_\-]', '', lastPart)
snip.rv = formatVariableName(t[1])
` = require('${1}')$0
endsnippet

snippet me "module.exports" b
module.exports = ${1:`!p snip.rv = ''.join(x.title() for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`};$0
endsnippet

snippet mef "module.exports function"
module.exports = function ${1:`!p snip.rv = snip.basename`} () {
  $0
}
endsnippet

snippet !
#!/usr/bin/env node
endsnippet

snippet px "Kill Process"
process.exit()
endsnippet

# }}}
# Promise {{{
# -----------------------------------------------------------------------------

snippet P "Promise"
return new Promise((resolve, reject) => {
  $0
})
endsnippet

# }}}
# Documentation {{{
# -----------------------------------------------------------------------------

# docstring
snippet /**
/**
 * ${0:description}
 */
endsnippet

snippet @par
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @ret
@return {${1:type}} ${0:description}
endsnippet

# --------------
# QUERY SELECTOR
# --------------

snippet id "Get element by Id to new Variable"
${3:const} ${2:name} = document.getElementById('${1:selector}')
endsnippet

snippet id "Foreach loop on Existing" "re.match('^.*\.', snip.buffer[snip.line])" ie
getElementById('${1:selector}')
endsnippet

snippet qs "Queryselector"
${3:const} ${2:name} = document.querySelector('${1:selector}')
endsnippet

snippet qs "Queryselector dot match" "re.match('^.*\.', snip.buffer[snip.line])" ie
querySelector('${1:selector}')
endsnippet

snippet qsa "Queryselectorall"
${3:const} ${2:name} = document.querySelectorAll('${1:selector}')
endsnippet

snippet qsa "Queryselector dot match" "re.match('^.*\.', snip.buffer[snip.line])" ie
querySelectorAll('${1:selector}')
endsnippet

# }}}
# Debugging {{{
# -----------------------------------------------------------------------------

snippet de "Debugger"
debugger;
endsnippet

snippet cl "Console Log"
console.log(${0})
endsnippet

snippet ce "Console Error Log"
console.error(${0});
endsnippet

snippet ct "Console Trace Log"
console.trace(${0:label})
endsnippet

snippet ctime "Console Time Log"
console.time(${0:label});
endsnippet

snippet cdir "Console Dir Log"
console.dir(${0:obj});
endsnippet

snippet esi "Eslint Ignore File"
/* eslint-disable */
endsnippet

# }}}
# Gulp {{{
# -----------------------------------------------------------------------------

snippet gulp "Gulp task"
gulp.task('${1:task}', () => gulp
  .src('${2:src}')
  .pipe(gulp.dest('${3:dst}'))
})
endsnippet

snippet gulpwatch "Gulp watch task"
gulp.task('watch', () => gulp
  .watch('${1:./src/*}', ['${2:task}'])
})
endsnippet

# }}}
# Misc {{{
# -----------------------------------------------------------------------------

snippet IFIE
(function() {
  ${1}
})();
endsnippet

snippet us "Use Strict"
'use strict';
endsnippet

snippet timeout "Timeout function"
setTimeout(function () {${0}}${2}, ${1:10})
endsnippet

snippet tap "Bitap"
.bitap(console.error, console.log)
endsnippet

# }}}
# Emmet {{{

snippet "\b(\.)?(brdrd|fz|[whs]|[fpmbtrbl][btlrhvwgs]?)(\d*)" "Style with Number Units" r
.${2:`!p
snip.rv = {
  'fg': 'flexGrow',
  'fs': 'flexShrink',

  't': 'top',
  'r': 'right',
  'b': 'bottom',
  'l': 'left',

  'fz': 'fontSize',

  'brdrd': 'borderRadius',
  'bw': 'borderWidth',

  'p': 'padding',
  'pb': 'paddingBottom',
  'pt': 'paddingTop',
  'pl': 'paddingLeft',
  'pr': 'paddingRight',
  'ph': 'paddingHorizontal',
  'pv': 'paddingVertical',

  'm': 'margin',
  'mb': 'marginBottom',
  'mt': 'marginTop',
  'ml': 'marginLeft',
  'mr': 'marginRight',
  'mh': 'marginHorizontal',
  'mv': 'marginVertical',

  'mw': 'maxWidth',
  'mh': 'maxHeight',

  's': 'size',
  'w': 'width',
  'h': 'height',
}.get(match.group(2), '')
`}(${1:`!p
snip.rv = match.group(3) or ''
`})
endsnippet

snippet "\b(\.)?(brdcl?|bgc|bc)" "Style with color" r
.${2:`!p
snip.rv = {
  'bgc': 'backgroundColor',
  'brdcl': 'borderColor',
  'bc': 'borderColor',
}.get(match.group(2), '')
`}($1)
endsnippet

snippet "\b(\.)?(pos[rfsa])" "Style with color" r
.position('$0${2:`!p
snip.rv = {
  'pos': '',
  'posr': 'relative',
  'posa': 'absolute',
  'posf': 'fixed',
  'poss': 'static',
}.get(match.group(2), '')
`}')
endsnippet

snippet bi "Bifold"
.bifold(console.log, console.log)
endsnippet

# }}}
