#+TITLE: Emacs Doom configuration
#+AUTHOR: Florian Schrödl (floscr)
#+PROPERTY: header-args :tangle yes
#+STARTUP: org-startup-folded: showall
#+BEGIN_SRC emacs-lisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Configuration
** Required Packages
#+BEGIN_SRC elisp
(require 'dash)
(require 's)
#+END_SRC
** About

This is my emacs config for [[https://github.com/hlissner/doom-emacs][doom-emacs]].

#+BEGIN_SRC elisp
(setq user-full-name "Florian Schrödl")
#+END_SRC

** Essentials
*** Directories
#+BEGIN_SRC elisp
(defcustom downloads-dir "~/Downloads/"
  "Directory containing my downloads."
  :type 'string)

(defcustom screenshot-dir "~/Pictures/Screenshots"
  "Directory containing my screenshots."
  :type 'string)
#+END_SRC
** Utilities
*** Macros
**** Aliases
#+BEGIN_SRC elisp
(defalias 'λ 'lambda)
#+END_SRC
**** Template Literals
:PROPERTIES:
:SOURCE:   https://gist.github.com/cbowdon/012d623920bd28453bf8
:END:

#+BEGIN_SRC elisp :tangle no
(template "2 = <<(+ 1 1)>>")
#+END_SRC

#+RESULTS:
: 2 = 2

#+BEGIN_SRC elisp
(defmacro template (text)
  "Template literals"
  (let ((pattern "<<\\(.*?\\)>>"))
    ;; The regexp matches anything between delimiters, non-greedily
    (with-temp-buffer
      (save-excursion (insert text))
      (let ((matches '()))
        (while (re-search-forward pattern nil t)
          (push (match-string 1) matches)
          (replace-match "%s" t t))
        `(format ,(buffer-string) ,@(reverse (mapcar 'read matches)))))))
#+END_SRC
*** General Helpers
**** Noop
#+BEGIN_SRC elisp
(defun noop (args) nil)
#+END_SRC
**** Run JXA scripts
#+BEGIN_SRC elisp
(defun do-jxa-script (cmd)
  "Run a osx javascript automation script via bash"
  (shell-command-to-string
   (concat "osascript -l 'JavaScript' -e '" cmd "'")))
#+END_SRC
**** Eval and Replace sexp
:PROPERTIES:
:SOURCE:   https://emacsredux.com/blog/2013/06/21/eval-and-replace/
:END:

#+BEGIN_SRC elisp
(defun eval-and-replace-sexp ()
  "Replace the preceding sexp with its value."
  (interactive)
  (right-char) ;; Fix for normal mode
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))
#+END_SRC
**** Kill and Message
#+BEGIN_SRC elisp
(defun copy-message (x)
  "Executes kill-new but with a message log side effect"
  (kill-new x)
  (message "Copied to clipboard: %s" x))
#+END_SRC
**** Shuffle List
:PROPERTIES:
:SOURCE:   [[http://kitchingroup.cheme.cmu.edu/blog/2014/09/06/Randomize-a-list-in-Emacs/][Randomize a list in Emacs]]
:END:

#+BEGIN_SRC elisp
(defun swap-list-items (LIST el1 el2)
  "in LIST swap indices EL1 and EL2 in place"
  (let ((tmp (elt LIST el1)))
    (setf (elt LIST el1) (elt LIST el2))
    (setf (elt LIST el2) tmp)))

(defun -shuffle (LIST)
  "Shuffle the elements in LIST.
shuffling is done in place."
  (loop for i in (reverse (number-sequence 1 (1- (length LIST))))
        do (let ((j (random (+ i 1))))
             (swap-list-items LIST i j)))
  LIST)
#+END_SRC
*** Math on Numbers
#+BEGIN_SRC elisp
(defun math-on-number (f &optional num)
  "Read user input and apply with function f to the number at point"
  (let* ((x (thing-at-point 'number))
         (arithmetic-symbol (pcase f
                              ('+ "+")
                              ('- "-")
                              ('/ "/")
                              ('* "*")
                              (_ (error "Unknown function %s" f))))
         (readline (concat (number-to-string x) " " arithmetic-symbol " "))
         (y (or num (read-number readline)))
         (result (funcall f x y))
         (bounds (bounds-of-thing-at-point 'evil-WORD)))
    (delete-region (car bounds) (cdr bounds))
    (insert (format "%.02f" result))))

(defun +math|add-to-number ()
  (interactive)
  (math-on-number '+))

(defun +math|subtract-from-number ()
  (interactive)
  (math-on-number '-))

(defun +math|subtract-maran-vegan ()
  (interactive)
  (math-on-number '- 8.60))

(defun +math|divide-by-number ()
  (interactive)
  (math-on-number '/))

(defun +math|multiply-by-number ()
  (interactive)
  (math-on-number '*))
#+END_SRC
*** Toggle Window Dedicated
:PROPERTIES:
:SOURCE:   [[https://emacs.stackexchange.com/questions/2189/how-can-i-prevent-a-command-from-using-specific-windows][buffers - How can I prevent a command from using specific windows? - Emacs Stack Exchange]]
:END:

To lock a window you set the dedicaded flag on the window.

#+BEGIN_SRC elisp
(defun toggle-window-dedicated ()
  "Control whether or not Emacs is allowed to display another
buffer in current window."
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window (not (window-dedicated-p window))))
       "%s: Window locked!"
     "%s: Window unlocked!")
   (current-buffer)))
#+END_SRC
*** File Utilities
**** Get the last file in directory
:PROPERTIES:
:SOURCE:   https://stackoverflow.com/a/30886283
:END:

#+BEGIN_SRC elisp
(defun +file/latest-file-in-dir (path)
  (let ((e (f-entries path)))
    (car (sort e (lambda (a b)
                   (not (time-less-p (file-timestamp a)
                                     (file-timestamp b))))))))

(defun file-timestamp (f) (let ((attrs (file-attributes f))) (nth 5 attrs)))
#+END_SRC
**** Reveal in Finder

The regular ~+macos/reveal-in-finder~ in doom only opens the folder.
This fix opens the folder and selects the file.

#+BEGIN_SRC elisp
(defun +macos/reveal-in-finder ()
  "Reveal the current file in finder and select it"
  (interactive)
  (do-applescript (concat
                   "tell application \"Finder\"\n"
                   "    activate\n"
                   "    reveal POSIX file \"" (buffer-file-name) "\"\n"
                   "end tell")))
#+END_SRC
*** Hydras
**** Hydra Expand Region
:PROPERTIES:
:SOURCE:   https://www.reddit.com/r/emacs/comments/also27/second_trial_for_a_weekly_tipstricksetc_thread/efi7pbj/
:END:

Expand region using a hydra.
Double press ~v~ to enable.

#+BEGIN_SRC elisp
(defhydra hydra-expand-region ()
   "region: "
   ("f" er/mark-defun "defun")
   ("v" er/expand-region "expand")
   ("V" er/contract-region "contract"))

(evil-define-key 'visual 'global (kbd "v") #'hydra-expand-region/body)
#+END_SRC
** UI
*** System specific window modifications

Resize the window font size etc according to the system.
This will be disabled in terminal mode.

#+BEGIN_SRC elisp
(when (display-graphic-p)
#+END_SRC

#+BEGIN_SRC elisp
(defcustom my-default-frame-size nil
  "A cons cell of screen dimensions (width . height)"
  :type 'cons)

(defcustom osx-screen-reserved-y-space 48
  "How much of the screen is available when subtracting the
1. app title bar
2. menu bar"
  :type 'integer)

(defcustom osx-screen-reserved-x-space 12
  "How much of the screen is available when subtracting the
1. Window Border"
  :type 'integer)

(defun my-set-initial-frame-size (size)
  "Set the initial frame"
  (let* ((width (car size))
         (height (cdr size))
         (left (- (x-display-pixel-width) width)))
    (setq initial-frame-alist
          (append (list `(left . ,left)
                        `(width . ,width)
                        '(fullscreen . fullheight))
                  initial-frame-alist)))
  (setq my-default-frame-size size))

(defun my-frame-resize-width (width)
  "Set the frame WIDTH. Maximize the frame vertically (minus the osx reserver space)"
  (set-frame-width (selected-frame) width nil t)
  (set-frame-height (selected-frame) (- (x-display-pixel-height) osx-screen-reserved-y-space) nil t)
  (set-frame-position (selected-frame) (- (x-display-pixel-width) width osx-screen-reserved-x-space) 0))

(defun my-frame-resize-work-external ()
  "External Monitor at work"
  (interactive)
  (my-frame-resize-width 1410))

(cond
 ((--first (s-contains? it system-name) '("Florians-MBP" "Florians-MacBook-Pro"))
  (my-frame-resize-work-external)
  (setq-default line-spacing 0.3))
 ((string= system-name "Florians-iMac.local")
  (setq-default line-spacing 10)
  (setq default-line-spacing 10)
  (setq doom-font (font-spec :family "Menlo" :size 14)))
 ((string= system-name "Florians-MacBook-Air.local")
  (setq-default line-spacing 0.4)
  (setq initial-frame-alist
        (append (list '(left . 272)
                      '(width . 165)
                      '(fullscreen . fullheight))
                initial-frame-alist)))
 (t (setq-default line-spacing 0.15)))
#+END_SRC


#+BEGIN_SRC elisp
)
#+END_SRC

*** Theme Toggle

Allows me to toggle quickly between two themes.

#+BEGIN_SRC elisp
(defconst light-theme 'doom-one)
(defconst dark-theme  'doom-one-light)

(defun +doom|toggle-theme ()
  "Toggle between light and dark themes."
  (interactive)
  (cond ((eq doom-theme dark-theme)
         (message "Toggling to light-theme: %s" light-theme)
         (setq doom-theme light-theme)
         (doom/reload-theme))
        ((eq doom-theme light-theme)
         (message "Toggling to dark-theme: %s" dark-theme)
         (setq doom-theme dark-theme)
         (doom/reload-theme))
        (t (message "Toggling theme is not possible. Theme is not currently light-theme (%s) or dark-theme (%s)." light-theme dark-theme))))
#+END_SRC
*** Scrolloff

Start scrolling X lines before the end of a screen.
Disable for terminal buffers, since there cane be issues completion/interactive
shell scripts.

#+BEGIN_SRC elisp
(setq
 scroll-conservatively 10
 scroll-margin 10)

(add-hook 'term-mode-hook (λ! (setq-local scroll-margin 0)))
(add-hook 'ivy-mode-hook (λ! (setq-local scroll-margin 0)))
#+END_SRC
*** Line Spacing

Change and reset line-spacing for all buffers.

#+BEGIN_SRC elisp
(defvar default-line-spacing 0.2)

(defun set-line-spacing (&optional spacing)
  "Set the line spacing
When no line spacing is given is the default-line-spacing"
  (if line-spacing
      (setq-default line-spacing (+ (or spacing default-line-spacing) line-spacing))
    (setq-default line-spacing (+ 0 default-line-spacing))))

(defun +ui|reset-line-spacing ()
  (interactive)
  (setq-default line-spacing nil))

(defun +ui|increase-line-spacing ()
  (interactive)
  (set-line-spacing))

(defun +ui|decrease-line-spacing ()
  (interactive)
  (set-line-spacing (- default-line-spacing)))

(evil-define-key 'normal 'global (kbd "]z") #'+line-spacing/step/body)

;;;###autoload (autoload '+common-lisp/macrostep/body "lang/common-lisp/autoload/hydras" nil nil)
(defhydra +line-spacing/step (:exit nil :hint nil :foreign-keys run)
  "
Macro Expansion
^^Definitions                           ^^Compiler Notes             ^^Stickers
^^^^^^─────────────────────────────────────────────────────────────────────────────────────
[_z_] Expand
[_Z_] Collapse
"
  ("z" +ui|increase-line-spacing)
  ("Z" +ui|decrease-line-spacing)
  ("q" noop :exit t))
#+END_SRC
*** Popups
#+BEGIN_SRC elisp
(after! org
  (set-popup-rule! "^\\*Org Agenda" :side 'right :size 0.55 :select t :modeline t :ttl nil :quit nil)
  (set-popup-rule! "^\\*Org Src" :ignore t)
  (set-popup-rule! "^\\*Org QL Search" :side 'bottom :size 0.5 :select t :modeline t :ttl nil))

(set-popup-rule! "^\\*helm" :vslot -100 :size 0.32 :ttl nil)
(set-popup-rule! "^\\*doom:scratch" :ignore t)

(set-popup-rule! "^\\*nodejs" :side 'right :size 0.55 :select t :modeline t :ttl nil)

(set-popup-rule! "^\\*compilation" :side 'right :size 0.5 :select t :modeline t :ttl nil)
#+END_SRC
*** (Visual) Fill Column
#+BEGIN_SRC elisp
(setq-default fill-column 110)
(setq visual-fill-column-width fill-column)

(setq visual-fill-column-center-text t
      visual-fill-column-width
      ;; take Emacs 26 line numbers into account
      (+ (if EMACS26+ 6 0) fill-column))
#+END_SRC
** Custom Packages
*** Birthday Messsage
#+BEGIN_SRC elisp
(setq birthday-slack-emojis '("🍰" "🎂" "🎉" "🎈" "🎁"))

(defun birthday-msg (name &optional emojis)
  "Creates birthday string"
  (let ((emojis (or emojis (--> birthday-slack-emojis
                               (-shuffle it)
                               (-take 3 it)
                               (string-join it " ")))))
    (template "<<(reverse emojis)>> !! Happy Birthday <<name>> !! <<emojis>>")))

(defun birthday-msg|copy ()
  "Copies birthday string"
  (interactive)
  (--> (read-string "Name: ")
       (birthday-msg it)
       (copy-message it)))
#+END_SRC
** Package Config
*** Blimp
#+BEGIN_SRC elisp
(def-package! blimp
  :hook (image-mode-hook . blimp-mode))
#+END_SRC
*** Comint
**** Allow evil enter anywhere

Fix for comint mode, throwing an error when pressing enter in the middle of the line.

#+BEGIN_EXAMPLE
error in process filter: End of buffer
#+END_EXAMPLE

#+BEGIN_SRC elisp
(map! :map comint-mode-map
      :n "RET" (λ! (comint-send-input nil t)))
#+END_SRC
*** Company
**** Config
***** Sort company by occurance
:PROPERTIES:
:SOURCE:   [[https://github.com/company-mode/company-mode/issues/52][{Proposal} Improve company-dabbrev candidate ordering · Issue #52 · company-mode/company-mode]]
:END:
#+BEGIN_SRC elisp
(setq company-transformers '(company-sort-by-occurrence)
      company-idle-delay 0.5)
#+END_SRC
**** Functions
***** Company complete whole lines for all matching buffers

Complete a whole line with all lines from buffers matching the current major-mode.

#+BEGIN_SRC elisp
(defun floscr:buffer-list-with-modes (modes)
  "Get all buffers that match MODES"
  (--filter
   (with-current-buffer it (-contains? (doom-enlist modes) major-mode))
   (buffer-list)))

(defun floscr:buffer-list-with-major-mode ()
  "Get all buffers matching the current major-mode
Has built in aliases"
  (let ((javascript-modes (list 'rjsx-mode 'js2-mode)))
    (pcase major-mode
      ('rjsx-mode
       (floscr:buffer-list-with-modes javascript-modes))
      ('js2-mode
       (floscr:buffer-list-with-modes javascript-modes))
      (_
       (floscr:buffer-list-with-modes major-mode)))))

(defun +company/whole-lines-all-buffers (command &optional arg &rest ignored)
  "`company-mode' completion backend that completes whole-lines, akin to vim's
C-x C-l."
  (interactive (list 'interactive))
  (require 'company)
  (pcase command
    (`interactive (company-begin-backend '+company/whole-lines-all-buffers))
    (`prefix      (company-grab-line "^[\t\s]*\\(.+\\)" 1))
    (`candidates
     (all-completions
      arg
      (funcall (-compose
                #'-uniq
                #'-flatten
                (lambda (xs)
                  (--map (with-current-buffer it
                           (split-string
                            (replace-regexp-in-string
                             "^[\t\s]+" ""
                             (buffer-substring-no-properties (point-min) (point-max)))
                            "\\(\r\n\\|[\n\r]\\)" t)) xs)))
               (floscr:buffer-list-with-major-mode))))))
#+END_SRC

Bindings

#+BEGIN_SRC elisp
(map!
 (:prefix "C-x"
   :i "C-l" #'+company/whole-lines-all-buffers
   :i "C-." #'+company/whole-lines))
#+END_SRC

*** Dired
**** Config
***** Use gls

Use ~gls~ with dired which is way faster than osx ~ls~
Must enable =dired-k-human-readable= when =-h= flag is given.
Otherwise dired comes to a grinding halt on some sizes.

#+BEGIN_SRC elisp
(after!
  dired
  :config
  (when (and IS-MAC (locate-file "gls" exec-path))
    (setq dired-listing-switches "-la -h --group-directories-first"
          dired-k-human-readable t
          insert-directory-program "gls" dired-use-ls-dired t)))
#+END_SRC
***** Window targeting

When there are two visual splits with dired buffers.
~C~ will take the other window as the copy target.
The cursor has to be on the dired frame with the marked files.

#+BEGIN_SRC elisp
(setq dired-dwim-target t)
#+END_SRC

***** Ignore .bs.js
#+BEGIN_SRC elisp
(def-package! dired-x
  :after dired
  :config
  (setq dired-omit-files
        (concat dired-omit-files
                ;; Reason Compiled Files
                "\\|\\.bs.js$")))
#+END_SRC
***** Disable dired from opening files in a new window
#+BEGIN_SRC elisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC
**** Functions
***** Kill all dired buffers with ~Q~
#+BEGIN_SRC elisp
(defun +dired|kill-dired-buffers ()
  "Kills all dired buffers
Dired creates a buffer for every directory which it visits
Which is fine since you can easily switch between visited buffers
But at some time I want to purge those buffers"
  (interactive)
  (mapc (lambda (buffer)
          (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
            (kill-buffer buffer)))
        (buffer-list)))

(map! :when (featurep! :editor evil +everywhere)
      :after dired
      :map dired-mode-map
      :n "Q" #'+dired|kill-dired-buffers)
#+END_SRC
***** Wdired Mode Switch

Stay in normal mode when switching to wdired

#+BEGIN_SRC elisp
(defun +dired|change-to-wdired-mode ()
  "Simple forward to wdired-change-to-wdired-mode, but staying in normal mode."
  (interactive)
  (wdired-change-to-wdired-mode)
  (evil-normal-state)
  (forward-char))
#+END_SRC

Map ~\~ to change to wdired mode, like text mode in maggit buffers.

#+BEGIN_SRC elisp
(map! :when (featurep! :editor evil +everywhere)
      :after dired
      :map dired-mode-map
      :n "\\" #'+dired|change-to-wdired-mode)
#+END_SRC
*** Dired Recent
#+BEGIN_SRC elisp
(def-package! dired-recent
  :after dired
  :init
  :config
  (setq dired-recent-directories-file (concat doom-cache-dir "recentdir")
        dired-recent-max-directories 300)
  (dired-recent-mode 1))
#+END_SRC
*** Eldoc
#+BEGIN_SRC elisp
;; Always truncate ElDoc messages to one line. This prevents the echo
;; area from resizing itself unexpectedly when point is on a variable
;; with a multiline docstring.
(setq eldoc-echo-area-use-multiline-p nil)

;; Show ElDoc messages in the echo area immediately, instead of after
;; 1/2 a second.
(setq eldoc-idle-delay 0)

;; Disable eldoc mode
(global-eldoc-mode -1)
#+END_SRC
*** Eshell
**** Aliases

Overrides dooms aliases.

#+BEGIN_SRC elisp
(setq +eshell-aliases
  '(("q"      "exit")
    ("f"      "find-file $1")
    ("bd"     "eshell-up $1")
    ("rg"     "rg --color=always $*")
    ("ag"     "ag --color=always $*")
    ("l"      "ls -lh")
    ("ll"     "ls -lah")
    ("gs"     "git status")
    ("groot"  "cd (projectile-project-root)")
    ("gc"     "git commit")
    ("grha"   "git reset --hard; git clean -f -d")
    ("clear"  "clear-scrollback")))
#+END_SRC
**** Syntax highlighted cat
#+BEGIN_SRC elisp
(defun +eshell/cat (file)
  "Like `cat' but output with Emacs syntax highlighting."
  (with-temp-buffer
    (insert-file-contents file)
    (let ((buffer-file-name file))
      (delay-mode-hooks
        (set-auto-mode)
        (if (fboundp 'font-lock-ensure)
            (font-lock-ensure)
          (with-no-warnings
            (font-lock-fontify-buffer)))))
    (buffer-string)))

(add-to-list '+eshell-aliases '("cat" "+eshell/cat $1"))
#+END_SRC
*** Evil-Snipe
**** Repeat snipe after further key press
#+BEGIN_SRC elisp
(after! evil-snipe
  (setq evil-snipe-repeat-keys t))
#+END_SRC
*** EWW Web Browser
**** Set the max page width
#+BEGIN_SRC elisp
(setq shr-width 120)
#+END_SRC
*** Flycheck
**** Proselint
:PROPERTIES:
:SOURCE:   https://unconj.ca/blog/linting-prose-in-emacs.html
:END:

Adds proselint checker to flycheck.
Not sure if I like this yet, seems slow and too opinionated.

To install proselint you have to install it via pip3

#+BEGIN_SRC bash :tangle no
pip3 install proselint
#+END_SRC

To enable the checker press ~SPC u C-c ! x~

#+BEGIN_SRC elisp
(after! flycheck
  :config
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
    :modes (text-mode markdown-mode gfm-mode))

  (add-to-list 'flycheck-checkers 'proselint))
#+END_SRC
*** git-lens
#+BEGIN_SRC elisp
(def-package! git-lens
  :commands (git-lens))
#+END_SRC
*** Indium
#+BEGIN_SRC elisp
(def-package! indium
  :commands indium-connect
  :config
  (setq indium-chrome-executable "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"))
#+END_SRC
*** Javascript
**** Config
#+BEGIN_SRC elisp
(setq
 flycheck-javascript-eslint-executable (executable-find "eslint_d")
 flycheck-disabled-checkers '(javascript-jshint javascript))

(after! rjsx-mode
  (add-hook 'js2-mode-hook #'eslintd-fix-mode)
  (map! :map rjsx-mode-map
        :localleader
        (:desc "Open Self-Closing Tag" :n ">" #'+rjsx|expand-insert-self-closing-tag)
        (:desc "Open Self-Closing Tag" :n "<" #'rjsx-rename-tag-at-point)))

(after! js2-mode
  (add-hook 'js2-mode-hook #'eslintd-fix-mode)
  :config
  (map! :map js2-mode-map
        :localleader
        (:desc "import" :n "i" #'+js|ivy-import-file)
        (:desc "Indium" :prefix "I"
          :desc "Reload" :n  "r" #'indium-reload
          :desc "Start" :n  "s" #'indium-connect)))
#+END_SRC

**** Helpers
#+BEGIN_SRC elisp
(defun +js/remove-js-ext (f)
  "Remove js extension from string"
  (replace-regexp-in-string "\.js$" "" f))

(defun +js/match-const-function-name (line)
  "Matches a line to the word after the declaration"
  (nth 2 (s-match
          "\\(const\\|let\\|class\\)\s\\(.+?\\)\s"
          line)))

(defun +js/const-function-at-point ()
  "Returns the current function name at the current line"
  (+js/match-const-function-name (thing-at-point 'line t)))
#+END_SRC
**** Functions
***** Export default variable

#+BEGIN_SRC elisp
(defun js2r-export-default ()
  "Exports the current declaration at the end of the file"
  (interactive)
  (save-excursion
    (let* ((name (+js/const-function-at-point)))
      (goto-char (point-max))
      (insert "\n")
      (insert (template "export default <<name>>;")))))
#+END_SRC

***** Extract constant to file

Extract the ~const~ under the cursor into a new file.

#+BEGIN_SRC elisp
(defun js2r-extract-const-to-file ()
  "Extracts function to external file"
  (interactive)
  (let* ((name (+js/const-function-at-point))
         (path (concat "./" name ".js")))
    (evil-digit-argument-or-evil-beginning-of-line)
    (js2r-kill)
    (f-write-text "" 'utf-8 path)
    (find-file path)
    (yank)))
#+END_SRC
***** Generate ~index.js~ file index

Generate a file index in the current file for every other file in the current directory.

#+BEGIN_SRC elisp
(defun +js/index-file-names (&optional actions-dir)
  "Get filenames from current buffers directory"
  (let ((fs (directory-files (or actions-dir default-directory) nil ".*\\.js")))
    (mapcar '+js/remove-js-ext
            (remove "index.js" fs))))

(defun +js|generate-index (&optional actions-dir)
  "Generate an index import file for files in directory"
  (interactive)
  (erase-buffer)
  (let* ((fs (+js/index-file-names actions-dir)))
    (mapc (lambda (f) (insert "import " f " from './" f "';\n")) fs)
    (insert "\n")
    (insert "export default {\n")
    (mapc (lambda (f) (insert "    " f ",\n")) fs)
    (insert "};")))
#+END_SRC
***** Convert expression into template string

Converts an expression into a template string.

Example:
When you would call the function on the ~foo~ inside the console.log,
It would wrap it like this ~console.log(`${foo}`)~.

#+BEGIN_SRC js :tangle no
const foo = 'Foo'
console.log(`${foo}`)
#+END_SRC

#+BEGIN_SRC elisp
(defun +js|convert-sexp-to-template-string ()
  "Wrap sexp into a template string"
  (interactive)
  (kill-sexp)
  (insert (concat "`${" (substring-no-properties (car kill-ring)) "}`"))
  (pop kill-ring))
#+END_SRC

***** Evil Function Text Object Motion

Adds text objects for functions in javascript.
So you can press ~daf~ to delete a function.

#+BEGIN_SRC elisp
(add-hook! js-mode
  (require 'evil-text-objects-javascript)
  (evil-text-objects-javascript/install))
#+END_SRC

***** Expand self closing tag

Converts self closing JSX tags to closing tags.
~<Foo />~ -> ~<Foo>|</Foo>~

#+BEGIN_SRC elisp
(defun +rjsx|expand-insert-self-closing-tag ()
  "Opens the current tag at any position of the cursor and starts insert mode"
  (interactive)
  (search-forward "/>")
  (evil-backward-char)
  (call-interactively #'delete-backward-char)
  (call-interactively #'rjsx-electric-gt)
  (newline)
  (call-interactively #'evil-indent-line)
  (call-interactively #'evil-open-above))
#+END_SRC
***** Company Files

Remove the ~js~ extension for ~company-files~.

#+BEGIN_SRC elisp
(defun company-js-files (command &optional arg &rest ignored)
  "Company complete path. Remove extension after completion"
  (interactive (list 'interactive))
  (require 'company)
  (cl-case command
    (interactive (company-begin-backend 'company-js-files))
    (prefix (company-files--grab-existing-name))
    (candidates (company-files--complete arg))
    (location (cons (dired-noselect
                     (file-name-directory (directory-file-name arg))) 1))
    (post-completion (when (s-matches? "\.js$" arg) (delete-backward-char 3)))
    (sorted t)
    (no-cache t)))

(map! :map js2-mode-map
      :i "C-x C-f" #'company-js-files)
#+END_SRC
***** Import JS File
#+BEGIN_SRC elisp
;; TODO Make template accepts a cursor placeholder
;; TODO Maybe even look at exports
(defun +js/import-file (file)
  (let ((cursor-postion (point))
        (filename (+js/remove-js-ext file)))
    (insert (template "import  from '<<filename>>';"))
    (goto-char cursor-postion)
    (forward-char 7)
    (evil-insert-state)))

(defun +js|ivy-import-file (&optional action)
  (interactive)
  (ivy-read "Import file "
            (append
             (--map (concat "./" it)
                    (split-string (shell-command-to-string (concat find-program " " counsel-file-jump-args)) "\n" t))
             (split-string (shell-command-to-string
                            (concat "jq -r '.dependencies | keys | .[]' " (concat (projectile-project-root) "package.json"))) "\n" t))
            :action (or action 'my-js-import-file)))

 #+END_SRC

*** JSON
**** Autofix JSON

Uses [[https://www.npmjs.com/package/json-fix][json-fix]] to autofix JSON files.

#+BEGIN_SRC bash :tangle no
npm i -g json-fix
#+END_SRC

#+BEGIN_SRC elisp
(defun json-fix ()
  "Autofix json buffer"
  (interactive)
  (let ((b (if mark-active (min (point) (mark)) (point-min)))
        (e (if mark-active (max (point) (mark)) (point-max))))
    (shell-command-on-region b e
     (template "json-fix --no-sort --spaces <<tab-width>>") (current-buffer) t)))
#+END_SRC

*** LSP
**** Disable LSP hover
#+BEGIN_SRC elisp
(def-package! lsp-mode
  :config
  (setq lsp-eldoc-render-all nil
        lsp-eldoc-enable-hover nil
        lsp-eldoc-enable-signature-help nil
        lsp-eldoc-prefer-signature-help nil
        lsp-inhibit-message t
        lsp-highlight-symbol-at-point nil
        ;; Disable make error highlighting
        lsp-prefer-flymake nil))
#+END_SRC
**** Disable LSP hover face
#+BEGIN_SRC elisp
(add-hook! 'doom-load-theme-hook
  (after! lsp
    (dolist (face '(lsp-face-highlight-read
                    lsp-face-highlight-write
                    lsp-face-highlight-textual))
      (set-face-attribute
       face nil
       :foreground nil :distant-foreground nil :background nil))))
#+END_SRC
*** Magit / Git
**** Utils
***** Create New Git Worktree Workspace

Creates a new git workspace from a branch.
Automatically adds ~.projectfile~ and opens a new doom workspace.

#+BEGIN_SRC elisp
(defun magit-worktree-branch-project-worktree (branch start-point &optional force)
  "Create a new BRANCH and check it out in a new worktree at PATH in a new workspace."
  (interactive
   `(,@(butlast (magit-branch-read-args "Create and checkout branch"))
     ,current-prefix-arg))
  (let* ((worktree-path (f-join (projectile-project-root) ".worktrees"))
         (path (f-join (projectile-project-root) ".worktrees" branch)))
    (when (not (f-exists-p worktree-path))
      (mkdir worktree-path t))
    (magit-run-git "worktree" "add" (if force "-B" "-b")
                   branch (expand-file-name path) start-point)
    (f-touch (f-join path ".projectile"))
    (+workspace-new branch)
    (+workspace-switch branch)
    (magit-diff-visit-directory path)
    (projectile-add-known-project path)
    path))
#+END_SRC

***** Revision show orignal file

Show the orginal file when visiting a revision buffer.
E.g.: When showing a diff from a commit, you may want to edit that file.

#+BEGIN_SRC elisp
(defun magit-revision-show-original-file ()
  "Show the orginal file from a revision buffer
If possible also go to the pointing line"
  (interactive)
  (when magit-buffer-file-name
    (let ((file-name magit-buffer-file-name)
          (line-number (line-number-at-pos)))
      (delete-other-windows)
      (find-file file-name)
      (goto-line line-number))))
#+END_SRC

***** Git changed files

Show a list of the changed files in the current branch.
For now only works on branches that were directly forked from master.

#+BEGIN_SRC elisp
(defun shell-command-to-list (cmd)
  "Split output from shell-command to list"
  (split-string (shell-command-to-string cmd) "\n" t))

(defun git-new-files ()
  (shell-command-to-list "git ls-files -om --exclude-standard"))

(defun git-modified-files (&optional branch)
  (shell-command-to-list
   (template "git --no-pager diff --no-renames --name-only --no-merges <<(magit-rev-parse \"HEAD\")>> <<branch>>;")))

(defun git-get-changed-files (b)
    (delete-dups (append (git-modified-files b) (git-new-files))))

(defun +git|ivy-changed-files (&optional branch)
  (interactive)
  (let ((enable-recursive-minibuffers t))
    (ivy-read (template "Changed files for <<branch>>:")
              (git-get-changed-files (or branch "master"))
              :require-match t
              :history 'file-name-history
              :action counsel-projectile-find-file-action
              :caller '+git|ivy-changed-files)))
#+END_SRC
***** Git undo
#+BEGIN_SRC elisp
(defun +git|undo ()
  "Soft reset current git repo to HEAD~1."
  (interactive)
  (magit-reset-soft "HEAD~1"))
#+END_SRC
***** Push dated remote branch

For work I need remote branches with a date prefix.

#+BEGIN_SRC elisp
(defun +git|push-dated (&optional branch)
  "Pushes the given the current BRANCH with a dated prefix
my-branch-name -> 19-01-my-branch-name
When no BRANCH is given, take the current one."
  (interactive)
  (let* ((branch (or branch (magit-get-current-branch)))
         (date (format-time-string "%y-%m"))
         (remote (template "origin/<<date>>-<<branch>>")))
    (magit-git-push branch remote nil)))
#+END_SRC

Add to an transient popup

#+BEGIN_SRC elisp
(after! magit
  (transient-append-suffix 'magit-push "p" '("d" "dated" +git|push-dated)))
#+END_SRC

***** TODO Browse git link

Browse the current thing at point for git

#+BEGIN_SRC elisp
(defun browse-git-link ()
  "Browse the git link at the current point"
  (interactive)
  (let ((git-link-open-in-browser t))
    (call-interactively 'git-link)))
#+END_SRC
**** Config
#+BEGIN_SRC elisp
(setq-default magit-save-repository-buffers 'dontask)

(after! magit
  :config
  (setq
   magithub-clone-default-directory "~/Code/Repositories"
   git-commit-summary-max-length 120))
#+END_SRC
**** Bindings
***** Diff Navigation

My workflow for navigating diffs
Use ~z1~ to fold all diffs to their file headers and presss ~{~ or ~}~ to

1. Refold all sections
2. Go to the next section
3. Unfold everything in the current section

Then use ~]~ to navigate the sections

#+BEGIN_SRC elisp
(defun floscr:magit-jumpunfold-section (&optional forward)
  "Fold all section. Go to next section when FORWARD. Show all children"
  (interactive)
  (magit-section-show-level-1-all)
  (call-interactively (if forward #'magit-section-forward-sibling #'magit-section-backward-sibling))
  (call-interactively #'magit-section-show-children))

(map!
 (:after evil-magit
   :map (magit-diff-mode-map)
   :n "}" (λ! (floscr:magit-jumpunfold-section 't))
   :n "{" (λ! (floscr:magit-jumpunfold-section))))
#+END_SRC

***** Magit Window Navigation Binding Fixes

Fixes evil window navigation for magit special buffers

#+BEGIN_SRC elisp
(map!
 (:after evil-magit
   :map (magit-status-mode-map magit-revision-mode-map magit-diff-mode-map)
   :n "C-j" #'evil-window-down
   :n "C-k" #'evil-window-up
   :n "C-h" #'evil-window-left
   :n "C-l" #'evil-window-right))
#+END_SRC

*** Markdown

Always keep markdown centered, without line numbers.

#+BEGIN_SRC elisp
(def-package! markdown-mode
  :init
  (setq markdown-fontify-code-blocks-natively t)
  :config
  (add-hook! markdown-mode
    (visual-line-mode)
    (visual-fill-column-mode)
    (outline-minor-mode)
    (setq visual-fill-column-width 90
          display-line-numbers nil)
    (setq line-spacing 2
          fill-column 80))

  (map! (:map markdown-mode-map
          :n "<"    #'markdown-promote
          :n ">"    #'markdown-demote)))
#+END_SRC
*** Nov (Epub Reading Mode)

Adds epub reading mode
[[https://github.com/wasamasa/nov.el][wasamasa/nov.el: Major mode for reading EPUBs in Emacs]]

I want to keep the buffer centered, but let nov take care of breaking the text,
since this is much nicer then ~visual-line-mode~.

#+BEGIN_SRC elisp
(defun my-nov-config ()
  (setq line-spacing 5)
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif" :height 1.4)
  (setq visual-fill-column-center-text t)
  (setq visual-fill-column-width (+ nov-text-width 25))
  (visual-fill-column-mode t))

(def-package! nov
  :defer t
  :init
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (setq nov-text-width 75)
  :config
  (progn
    (add-hook 'nov-mode-hook 'my-nov-config)))
#+END_SRC

The font can be installed via brew cask.

#+BEGIN_SRC bash :tangle no
brew tap homebrew/cask-fonts
brew cask install font-liberation-sans
#+END_SRC
*** NPM Mode
**** Add CI command
#+BEGIN_SRC elisp
(defun npm-mode-npm-ci ()
  "Run the 'npm install' command."
  (interactive)
  (npm-mode--exec-process "npm ci"))
#+END_SRC
*** Org
**** Utils
***** Add source property from chrome
#+BEGIN_SRC elisp
(defun +org|source-properties-key-from-browser ()
  "Add the link from the frontmost chrome tab as a source property."
  (interactive)
  (org-set-property "SOURCE" (org-mac-chrome-get-frontmost-url)))
#+END_SRC
***** Archive all done tasks
#+BEGIN_SRC elisp :tangle no
(defun +org|archive-done-tasks ()
  "Archive tasks with DONE or CANCELED todo state."
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (outline-previous-heading)))
   "/+{|DONE|CANCELED}" 'tree))
#+END_SRC
***** Archive and Done
#+BEGIN_SRC elisp
(defun +org|archive-and-done ()
  "Mark task as done and archive"
  (interactive)
  (org-todo "DONE")
  (org-archive-subtree))

(defun +org|agenda-archive-and-done ()
  "Mark agenda task as done and archive"
  (interactive)
  (org-agenda-todo "DONE")
  (org-agenda-archive))
#+END_SRC
***** Copy block to clipboard
#+BEGIN_SRC elisp
(defun +org|copy-block ()
  "Copies the current block to clipboard"
  (interactive)
  (org-edit-src-code)
  (clipboard-kill-ring-save (point-min) (point-max)))
#+END_SRC
***** Export As Markdown
#+BEGIN_SRC elisp
(defun +org/copy-as-markdown (&optional subtree-p)
  "Copy the current subtree as markdown to clipboard"
    (let* ((org-export-with-toc nil)
           (md (org-md-export-as-markdown nil subtree-p)))
      (kill-ring-save (point-min) (point-max))
      (kill-buffer md)))

(defun +org|copy-buffer-as-markdown ()
  "Copy the entire buffer as markdown to clipboard."
  (interactive)
  (+org/copy-as-markdown))

(defun +org|copy-subtree-as-markdown ()
  "Copy the subtree as markdown to clipboard."
  (interactive)
  (+org/copy-as-markdown t))
#+END_SRC
***** Grab Tablist from Chrome
#+BEGIN_SRC elisp
(defun +org|grab-chrome-tabs ()
  "Grab all the chrome tabs as an org list to save for later inspection"
  (interactive)
  (let ((tabs
         (do-jxa-script
          (concat
           "Application(\"Chrome\").windows[0].tabs()"
           ".map(tab => `"
           "- [[${tab.url()}][${tab.title()}]]"
           "`)"
           ".join(\"\\n\")"))))
    (insert tabs)))
#+END_SRC
***** Org Attach
****** Download
#+BEGIN_SRC elisp
(defun +org-attach/downloads-file (file)
  "Attach a file in your downloads-directory"
  (interactive (list (read-file-name "Attach File: " downloads-dir)))
  (+org-attach/uri file))
#+END_SRC
****** Screenshot
#+BEGIN_SRC elisp
(defun +org-attach/last-screenshot ()
  "Attaches the last screenshot"
  (interactive)
  (+org-attach/file (+file/latest-file-in-dir screenshot-dir)))
#+END_SRC
***** Paste Chrome Link Fix

Fixes wrong paste behaviour where the link would be inserted directly on the character by adding a space

E.g.: (Brackets signal the cursor position)

: **[*]
: ***[]"

#+BEGIN_SRC elisp
(defun +org|paste-chrome-link ()
  "Paste the frontmost chrome link"
  (interactive)
  (unless (looking-at-p "[\s\t\n\r]") (forward-char))
  (insert " ")
  (insert (org-mac-chrome-get-frontmost-url)))
#+END_SRC
***** Paste Markdown as org
#+BEGIN_SRC elisp
(defun +org|paste-markdown-as-org ()
  "Convert the current clipboard to markdown"
  (interactive)
  (insert (shell-command-to-string "pbpaste | pandoc -f markdown -t org")))
#+END_SRC
***** Schedule Tomorrow
:PROPERTIES:
:SOURCE:   [[https://github.com/xandeer/.doom/blob/master/modules/private/xandeer/+org.el][.doom/+org.el at master · xandeer/.doom]]
:END:

#+BEGIN_SRC elisp
(defun +org|schedule-tomorrow ()
  "Return scheduled string on tomorrow."
  (format-time-string "SCHEDULED: <%F %a>"
                      (time-add (current-time) (* 24 3600))))
#+END_SRC
***** Sort org entries
#+BEGIN_SRC elisp
(defun +org|sort-entries ()
  "Go to header and sort entries"
  (interactive)
  (org-up-element)
  (org-sort)
  (org-shifttab)
  (org-cycle))
#+END_SRC
***** Visit archive file
#+BEGIN_SRC elisp
(defun +org|visit-archive-file ()
  (interactive)
  (let ((archive-filename (car (org-archive--compute-location org-archive-location))))
    (find-file archive-filename)
    (end-of-buffer)))
#+END_SRC
***** Algin All Tags
#+BEGIN_SRC elisp
(defun +org|align-all-tags ()
  "Interactive version of org-align-all-tags"
  (interactive)
  (org-align-all-tags))
#+END_SRC
***** Org get chrome tab formatted

The Github Review Title is very long,
shorten it a bit for the org capture templates.

#+BEGIN_SRC elisp
(defun +github/just-pr-title (title)
  (car (s-split " · " title)))

(defun +org/mac-chrome-get-frontmost-url-custom-format ()
  "Adaption for org-as-mac-chrome-get-frontmost-url"
    (--> (org-as-mac-chrome-get-frontmost-url)

         (s-split "::split::" it)

         (pcase it
           ((pred (s-contains? "github.com" (-first-item it)))
            (-update-at (- (length it) 1)
                        #'+github/just-pr-title
                        it))
           (_ it))

         (s-join "::split::" it)

         (org-mac-paste-applescript-links it)))
#+END_SRC
***** Custom Agenda Compare

Sort my agenda entries by a ~DATE_CREATED~ property.

#+BEGIN_SRC elisp
(setq-default +org-created-property "DATE_CREATED")
#+END_SRC

#+BEGIN_SRC elisp
(defun +org|compare-created-date-property (a b)
  "Compare two `org-mode' agenda entries, `A' and `B', by the \"CREATED\" property."
  (let* ((a-pos (get-text-property 0 'org-marker a))
         (b-pos (get-text-property 0 'org-marker b))
         (a-date (or (org-entry-get a-pos +org-created-property)
                     (format "<%s>" (org-read-date t nil "now"))))
         (b-date (or (org-entry-get b-pos +org-created-property)
                     (format "<%s>" (org-read-date t nil "now"))))
         (cmp (compare-strings a-date nil nil b-date nil nil)))
    (if (eq cmp t) nil (signum cmp))))
#+END_SRC
**** Config
***** General Config
****** Todo Keywords
#+BEGIN_SRC elisp
(after! org
  :config
  (setq org-todo-keywords
        '((sequence "ACTIVE(a)" "NEXT(n)" "|" "DONE")
          (sequence "TODO(t)" "|" "DONE(x)")
          (sequence "[ ]([)" "|" "[X](])")
          (sequence "PROJECT(p)" "|" "DONE")
          (sequence "NOTE(N)")
          (sequence "WAITING(w)" "LATER(l)" "SOMEDAY(s)" "|" "DONE" "CANCELLED(c)"))
   org-todo-keyword-faces
   '(("ACTIVE" :inherit warning :weight bold)
     ("NEXT" :inherit warning :weight bold)
     ("NOTE" :inherit warning :weight bold)
     ("WAITING" :inherit default :weight bold)
     ("SOMEDAY" :inherit default :weight bold)
     ("LATER" :inherit default :weight bold)
     ("PROJECT" :inherit 'org-todo :weight bold))))
#+END_SRC
****** Projectile Ignore

#+BEGIN_SRC elisp
(after! projectile
  (add-to-list 'projectile-globally-ignored-file-suffixes ".org_archive")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".DS_Store"))
#+END_SRC

****** Org variables
#+BEGIN_SRC elisp
(setq
 org-directory (expand-file-name "~/Dropbox/org")
 org-pinboard-dir org-directory
 org-pinboard-file (concat org-pinboard-dir "/Bookmarks/bookmarks.org")
 org-pinboard-archive-file (concat org-pinboard-dir "/Bookmarks/.archive/pinboard.org")
 org-default-notes-file (concat org-directory "/inbox.org")
 org-shopping-list-file (concat org-directory "/shoppinglist.org")
 +org-reading-list-file (concat org-directory "/reading-list.org"))

(after! org
  :config
  (setq
   org-tags-column (- fill-column)
   org-image-actual-width 600
   org-default-notes-file (concat org-directory "/inbox.org")))
#+END_SRC
****** Latex
Needs ~dvisvgm~

#+BEGIN_SRC elisp
(setq org-latex-create-formula-image-program 'dvisvgm)
#+END_SRC
****** Attachment short link
#+BEGIN_SRC elisp :tangle no
(add-to-list 'org-link-abbrev-alist (cons "attach" (abbreviate-file-name org-attach-directory)))
#+END_SRC
***** Refile Targets

#+BEGIN_SRC elisp
(defun expand-org-file-names (xs)
  (mapcar (λ (x) (expand-file-name x org-directory)) xs))

(setq level-1-refile-targets (expand-org-file-names '("reading-list.org"
                                                      "cooking.org"
                                                      ;; "books.org"
                                                      "programming.org"
                                                      "shoppinglist.org")))

(setq max-level-2-refile-targets (expand-org-file-names '("Emacs.org"
                                                          "art.org"
                                                          "diary"
                                                          "games.org"
                                                          "hardware.org"
                                                          "home.org"
                                                          "inbox.org"
                                                          "mealplan.org"
                                                          "misc.org"
                                                          "movies.org"
                                                          "music.org"
                                                          "osx.org"
                                                          "personal.org"
                                                          "podcasts.org"
                                                          "projects.org"
                                                          "sleep.org"
                                                          "sports.org"
                                                          "travel.org"
                                                          "Work/work.org")))

(defun level-1-refile-targets () level-1-refile-targets)

(defun max-level-2-refile-targets () max-level-2-refile-targets)

(after! org
  :config
  (setq org-refile-targets (quote ((nil :maxlevel . 5)
                                   (max-level-2-refile-targets :maxlevel . 2)
                                   (level-1-refile-targets :level . 1)))
        org-agenda-refile org-agenda-files))
#+END_SRC
***** Journal
#+BEGIN_SRC elisp :tangle no
(defvar org-journal-dir-default "~/Dropbox/org/journal")
(defvar org-journal-dir-diary "~/Dropbox/org/diary")

(setq org-journal-dir org-journal-dir-default)
(setq org-journal-file-format "%Y-%m-%d")
(setq org-journal-date-prefix "#+TITLE: ")
(setq org-journal-date-format "%A, %B %d %Y")
(setq org-journal-time-prefix "* ")
(setq org-journal-time-format "")
#+END_SRC
***** Org Capture
****** Org Capture Config

#+BEGIN_SRC elisp
(setq +org-capture-frame-parameters
  `((name . "org-capture")
    (width . 120)
    (height . 35)
    (transient . t)))
#+END_SRC

****** Add created property after capture
#+BEGIN_SRC elisp
(defun +org|add-created-date-property ()
  "Add DATE_CAPTURED property to the current item."
  (interactive)
  (org-set-property +org-created-property (format-time-string  "[%Y-%m-%d %a %H:%M]")))

(add-hook 'org-capture-before-finalize-hook '+org|add-created-date-property)
#+END_SRC

****** Org Capture Templates

#+BEGIN_SRC elisp
(defun org-capture-bookmark-pair ()
  (split-string (org-as-mac-chrome-get-frontmost-url) "::split::"))

(defun org-capture-bookmark-string-url ()
  (car (org-capture-bookmark-pair)))

(defun org-capture-bookmark-string-description ()
  (cadr (org-capture-bookmark-pair)))

(after! org
  :config
  (setq org-capture-templates
        `(("t" "todo" entry
           (file org-default-notes-file)
           "* TODO %?")

          ("c" "Calendar Event" entry
           (file+headline ,(concat org-directory "/home.org") "Calendar")
           "* %?")

          ("e" "Emacs Todo" entry
           (file+headline ,(concat org-directory "/emacs.org") "Emacs Todos")
           "* TODO %?")

          ("p" "Pin Bookmark" entry (file+headline org-pinboard-file "Pinboard")
           "* %(org-capture-bookmark-string-description)%?\n:PROPERTIES:\n:URL:  %(org-capture-bookmark-string-url)\n:TIME: %U\n:END:")

          ("rr" "Add to reading list" entry (file+headline +org-reading-list-file "Reading List")
           "* TODO %(org-mac-chrome-get-frontmost-url)%?")

          ("rw" "Add to watching list" entry (file+headline +org-reading-list-file "Watching List")
           "* TODO %(org-mac-chrome-get-frontmost-url)%?")

          ("C" "Browser" entry
           (file org-default-notes-file)
           "* TODO %(org-mac-chrome-get-frontmost-url)%?")

          ("ww" "Work Task" entry
           (file+headline ,(concat org-directory "/Work/work.org") "Work Todos")
           "* TODO %?")

          ("wr" "Work Review" entry
           (file+headline ,(concat org-directory "/Work/work.org") "Work Todos")
           "* TODO %(+org/mac-chrome-get-frontmost-url-custom-format)%? :REVIEW: "))))
#+END_SRC
***** Src Block Snippets
#+BEGIN_SRC elisp :tangle no
(add-to-list 'org-structure-template-alist '("es" "#+BEGIN_SRC elisp\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("E" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE"))
(add-to-list 'org-structure-template-alist '("j" "#+BEGIN_SRC js\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("ps" "#+BEGIN_SRC purescript\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("b" "#+BEGIN_SRC bash\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("re" "#+BEGIN_SRC reason\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("oc" "#+BEGIN_SRC ocaml\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("rb" "#+BEGIN_SRC ruby\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("md" "#+BEGIN_SRC markdown\n?\n#+END_SRC\n"))
#+END_SRC
***** Leader Bindings
#+BEGIN_SRC elisp
(map! :leader (:desc "Notes" :prefix "n"
                :desc "Pinboard File"             "B"  (λ! (find-file org-pinboard-file))
                :desc "Save All Org Buffers"      "S"  #'org-save-all-org-buffers
                :desc "Agenda"                    "a"  #'org-agenda
                :desc "Search Pinboard"           "b"  #'helm-org-pinboard
                (:prefix-map ("c" . "clock")
                  :desc "Clock In"                "c"  #'org-clock-in
                  :desc "Clock Out"               "C"  #'org-clock-out
                  :desc "Mark Default Task"       "d"  #'org-clock-mark-default-task
                  :desc "Modify Effort Estimate"  "e"  #'org-clock-modify-effort-estimate
                  :desc "Clock In Last"           "l"  #'org-clock-in-last
                  :desc "Goto Current"            "g"  #'org-clock-goto
                  :desc "Goto Select"             "G"  (λ! (org-clock-goto 'select))
                  :desc "Cancel"                  "x"  #'org-clock-cancel
                  :desc "Timestamp Up"            "="  #'org-clock-timestamps-up
                  :desc "Timestamp Down"          "-"  #'org-clock-timestamps-down)
                :desc "Emacs"                     "e"  (λ! (find-file (concat org-directory "/Emacs.org")))
                :desc "Home"                      "h"  (λ! (find-file (concat org-directory "/home.org")))
                :desc "Inbox"                     "i"  (λ! (find-file (concat org-directory "/inbox.org")))
                :desc "Reading List"              "r"  #'+org-reading-list/org-open-reading-list-file
                :desc "Work"                      "w"  (λ! (find-file (concat org-directory "/Work/work.org")))
                :desc "Store Link"                "y"  #'org-store-link))
#+END_SRC
***** General Bindings
#+BEGIN_SRC elisp
(after! org
  (map! :map evil-org-mode-map
        :n "s-j" #'org-move-subtree-down
        :n "s-k" #'org-move-subtree-up

        :localleader
        :desc "Archive Subtree"          :m "a" #'org-archive-subtree
        :desc "Archive Subtree and Done" :m "A" #'+org|archive-and-done
        :desc "Paste Chrome Link"        :m "p" #'+org|paste-chrome-link
        :desc "Grab tabs"                :m "P" #'+org|grab-chrome-tabs
        :desc "Cut Subtree"              :m "C" #'org-cut-subtree
        :desc "Paste Subtree"            :m "P" #'org-paste-subtree
        :desc "Sort Entries"             :m "S" #'+org|sort-entries

        :desc "Create/Edit Todo"  :nve "o" #'org-todo
        :desc "Schedule"          :nve "s" #'org-schedule
        :desc "Deadline"          :nve "d" #'org-deadline
        :desc "Refile"            :nve "r" #'org-refile
        :desc "Filter"            :nve "f" #'org-match-sparse-tree
        :desc "Tag heading"       :nve "t" #'org-set-tags-command

        (:desc "Attach" :prefix "F"
          :desc "Downloads File" :m "d" '+org-attach/downloads-file
          :desc "Screenshot" :m "s" '+org-attach/last-screenshot
          :desc "URI" :m "u" '+org-attach/uri
          :desc "File" :m "f" '+org-attach/file)

        (:desc "Insert" :prefix "i"
          :desc "Subheadeing" :m "s" (λ!
                                      (call-interactively 'org-insert-subheading)
                                      (evil-insert-state))
          :desc "Inavtive Timestamp" :m "i" 'org-time-stamp-inactive)
        (:desc "Narrow" :prefix "n"
          :desc "Indirect Buffer Tree" :m "i" #'org-tree-to-indirect-buffer
          :desc "Subtree"              :m "s" #'org-narrow-to-subtree
          :desc "Block"                :m "b" #'org-narrow-to-block
          :desc "Element"              :m "e" #'org-narrow-to-element
          :desc "widen"                :m "w" #'widen)))
#+END_SRC
***** Agenda
****** Config
#+BEGIN_SRC elisp
(after! org-agenda
  (setq-default
   org-agenda-cmp-user-defined #'+org|compare-created-date-property
   org-agenda-sorting-strategy '((agenda habit-down user-defined-up time-up priority-down category-keep)
                                 (todo priority-down category-keep user-defined-up time-up)
                                 (tags priority-down category-keep user-defined-up time-up)
                                 (search category-keep))))
#+END_SRC

****** Bindings
#+BEGIN_SRC elisp
(evil-define-key 'motion org-agenda-mode-map
  "vd" 'org-agenda-day-view
  "ds" 'org-agenda-schedule
  "vw" 'org-agenda-week-view
  "vm" 'org-agenda-month-view
  "vy" 'org-agenda-year-view)
#+END_SRC
****** Custom Agenda Commands

#+BEGIN_SRC elisp
(after! org-agenda
#+END_SRC

******* Today View
#+BEGIN_SRC elisp
(add-to-list 'org-agenda-custom-commands
             '("d" "Today" ((agenda "a"
                                    ((org-agenda-prefix-format "  %?-12t% s")
                                     (org-agenda-start-on-weekday nil)
                                     (org-agenda-span 1)
                                     (org-agenda-files (--map (concat org-directory "/" it) '("inbox.org" "home.org" "Work/work.org")))
                                     (org-agenda-start-day ".")
                                     (org-agenda-skip-scheduled-if-done t)
                                     (org-agenda-sorting-strategy '(timestamp-up time-up))
                                     (org-agenda-day-view)
                                     (org-super-agenda-groups '((:name "Today" :date today :time-grid t)
                                                                (:name "Overdue" :deadline past :scheduled past)
                                                                (:name "Future" :anything (:scheduled future)))))))))
#+END_SRC

******* All TODO Items

#+BEGIN_SRC elisp
(add-to-list 'org-agenda-custom-commands
             '("x" "Todo Items" alltodo ""
               ((org-agenda-prefix-format "  %?-12t% s")
                (org-agenda-sorting-strategy '(timestamp-down todo-state-down))
                (org-agenda-files (--map (concat org-directory "/" it) '("inbox.org" "home.org")))
                (org-super-agenda-groups '((:name "Next" :todo ("ACTIVE"))
                                           (:name "Scheduled" :scheduled t)
                                           (:name "Inbox" :file-path ".*inbox.org$" :order 2)
                                           (:name "Unscheduled" :and (:todo "TODO" :scheduled nil :not (:tag "BACKLOG")) :order 1)
                                           (:name "Backlog" :tag "BACKLOG" :order 3))))))
#+END_SRC

******* Emacs

#+BEGIN_SRC elisp
(add-to-list 'org-agenda-custom-commands
             '("e" "Emacs Items" alltodo ""
               ((org-agenda-prefix-format "  %?-12t% s")
                (org-agenda-sorting-strategy '(timestamp-down todo-state-down))
                (org-agenda-files (--map (concat org-directory "/" it) '("Emacs.org")))
                (org-super-agenda-groups '((:name "Active" :todo "ACTIVE")
                                           (:name "Next" :todo "NEXT")
                                           (:name "Low Effort" :effort< "0:30")
                                           (:name "Todo" :todo "TODO"))))))
#+END_SRC

******* Work
#+BEGIN_SRC elisp
(add-to-list 'org-agenda-custom-commands
             '("w" "Work Agenda"
               ((agenda "a" ((org-agenda-span 1)
                             (org-agenda-use-time-grid 'require-timed)
                             (org-agenda-start-day ".")))
                (tags-todo "+WORK-EVENT"
                   ((org-agenda-sorting-strategy '(timestamp-down time-down))
                    (org-super-agenda-groups '((:name "In Progress" :todo "ACTIVE")
                                               (:name "Coming Up Today" :scheduled today)
                                               (:name "Meta Work" :tag "META_WORK" :order 3)
                                               (:name "Reviews" :tag "REVIEW" :order 5)
                                               (:name "Tasks" :not (:todo "SOMEDAY" :todo "WAITING" :tag ("BACKLOG" "TEXT" "EMACS")) :order 4)
                                               (:name "Waiting" :todo "WAITING" :order 6)
                                               (:name "Backlog" :tag "BACKLOG" :order 11)
                                               (:name "Reading List" :tag "TEXT" :order 10))))))
               ((org-agenda-hide-tags-regexp "WORK\\|BACKLOG")
                (org-agenda-tag-filter-preset '("+WORK"))
                (org-agenda-files (--map (concat org-directory "/" it) '("Work/work.org" "inbox.org"))))))
#+END_SRC

******* Calendar

#+BEGIN_SRC elisp
(add-to-list 'org-agenda-custom-commands
             '("c" "Calendar" agenda ""
               ((org-agenda-span 7)
                (org-agenda-start-on-weekday nil)
                (org-agenda-start-day "-1d")
                (org-agenda-tag-filter-preset '("+CALENDAR")))))
#+END_SRC

******* Closing Tag

#+BEGIN_SRC elisp
:config
(setq org-agenda-files (list org-directory (concat org-directory "/Work"))))
#+END_SRC

******* Helper to reset the org agenda custom commands.

#+BEGIN_SRC elisp :tangle no
(setq org-agenda-custom-commands '())
#+END_SRC
***** Clocking
****** Automatically set clocking or todo state
:PROPERTIES:
:SOURCE:   [[https://github.com/magnars/dash.el#-contains-list-element][magnars/dash.el: A modern list library for Emacs]]
:END:

#+BEGIN_SRC elisp
(after! org
#+END_SRC

Clock in when the todo state has been changed to ~ACTIVE~

#+BEGIN_SRC elisp
(defun +org/org-clock-in-if-starting ()
  "Clock in when the task is marked ACTIVE."
  (when (and (string= org-state "ACTIVE")
             (not (string= org-last-state org-state)))
    (org-clock-in)))

(add-hook 'org-after-todo-state-change-hook '+org/org-clock-in-if-starting)
#+END_SRC

Clock out when the todo state is set to a delay state.

#+BEGIN_SRC elisp
(defun +org/org-clock-out-if-waiting ()
  "Clock out when the task is marked WAITING."
  (when (and (-contains? '("WAITING" "SOMEDAY" "CANCELLED") org-state)
             (equal (marker-buffer org-clock-marker) (current-buffer))
             (< (point) org-clock-marker)
             (> (save-excursion (outline-next-heading) (point))
               org-clock-marker)
             (not (string= org-last-state org-state)))
    (org-clock-out)))

(add-hook 'org-after-todo-state-change-hook '+org/org-clock-out-if-waiting)
#+END_SRC

Set the active state when clocking in.

#+BEGIN_SRC elisp
(defun +org/org-set-active-state (&optional args)
  "Set the active state for the current item."
  (org-todo "ACTIVE"))

(advice-add #'org-clock-in :after #'+org/org-set-active-state)
#+END_SRC

#+BEGIN_SRC elisp
)
#+END_SRC
*** Org QL
#+BEGIN_SRC elisp
(def-package! org-ql
  :commands (org-ql-search))
#+END_SRC
*** Org SuperAgenda
#+BEGIN_SRC elisp
(def-package! org-super-agenda
  :after org
  :config
  (org-super-agenda-mode 1)
  ;; Disable org-super-agenda keymap which breaks evil mappings
  (setq org-super-agenda-header-map (make-sparse-keymap)))
#+END_SRC
*** PDF Tools
#+BEGIN_SRC elisp
;; Enable Retina pdfs
(setq pdf-view-use-scaling t)

;; Fix midnight colors for doom-one theme
(setq pdf-view-midnight-colors '("#BBC2CD" . "#282C34"))
#+END_SRC
*** rainbow-mode
#+BEGIN_SRC elisp
(def-package! rainbow-mode
  :commands (rainbow-mode))
#+END_SRC
*** Smerge Mode
**** Fix Colors
#+BEGIN_SRC elisp
(after! smerge-mode
  :config
  ;; TODO This is broken after switching the theme but works for now
  ;; This fixes the smerge diff color is really bright an ugly
  (set-face-attribute 'smerge-refined-added nil :foreground nil :background nil))
#+END_SRC
**** Hydra
:PROPERTIES:
:SOURCE:   [[https://github.com/alphapapa/unpackaged.el#hydra][alphapapa/unpackaged.el: A collection of useful Emacs Lisp code that isn't substantial enough to be packaged]]
:END:

#+BEGIN_SRC elisp
(use-package smerge-mode
  :after hydra
  :config
  (defhydra unpackaged/smerge-hydra
    (:color pink :hint nil :post (smerge-auto-leave))
    "
^Move^       ^Keep^               ^Diff^                 ^Other^
^^-----------^^-------------------^^---------------------^^-------
_n_ext       _b_ase               _<_: upper/base        _C_ombine
_p_rev       _u_pper              _=_: upper/lower       _r_esolve
^^           _l_ower              _>_: base/lower        _k_ill current
^^           _a_ll                _R_efine
^^           _RET_: current       _E_diff
"
    ("n" smerge-next)
    ("p" smerge-prev)
    ("b" smerge-keep-base)
    ("u" smerge-keep-upper)
    ("l" smerge-keep-lower)
    ("a" smerge-keep-all)
    ("RET" smerge-keep-current)
    ("\C-m" smerge-keep-current)
    ("<" smerge-diff-base-upper)
    ("=" smerge-diff-upper-lower)
    (">" smerge-diff-base-lower)
    ("R" smerge-refine)
    ("E" smerge-ediff)
    ("C" smerge-combine-with-next)
    ("r" smerge-resolve)
    ("k" smerge-kill-current)
    ("ZZ" (lambda ()
            (interactive)
            (save-buffer)
            (bury-buffer))
     "Save and bury buffer" :color blue)
    ("q" nil "cancel" :color blue))
  :hook (magit-diff-visit-file . (lambda ()
                                   (when smerge-mode
                                     (flycheck-mode -1)
                                     (unpackaged/smerge-hydra/body)))))
#+END_SRC

*** TODO Spelling

Flycheck with ~hunspell~ (which supports other languages better than the default ~ispell~)

With the latest brew update hunspell might be broken, here is how you fix it:

#+BEGIN_SRC bash :tangle no
ln -fs /usr/local/opt/readline/lib/libreadline.8.0.dylib /usr/local/opt/readline/lib/libreadline.7.dylib
#+END_SRC

#+RESULTS:

#+BEGIN_SRC elisp :tangle no
(defun +flyspell|save-word ()
  "Save the current word to dictionary"
  (interactive)
  (let* ((current-location (point))
         (word (flyspell-get-word)))
    (when (consp word)
      (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

(after! flyspell
  (cond
   ((executable-find "hunspell")

    ;; For the switching, "german" has to be also in this alist
    (add-to-list 'ispell-hunspell-dict-paths-alist (list "german" (expand-file-name "~/Library/Spelling/de_AT.aff")))

    (setq ispell-program-name "hunspell"
          ispell-local-dictionary "en_US"
          ispell-really-hunspell t
          ispell-local-dictionary-alist
                  ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
                  ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
                  '(("english" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "personal,en_US") nil utf-8)
                    ("german"  "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "personal,de_AT") nil utf-8))))))

(defun flyspell-set-language-environment ()
  "Change flyspell language based on the language environment"
  (cond
   ((string= "English" current-language-environment)
    (setq ispell-local-dictionary "english"))
   ((string= "German" current-language-environment)
    (setq ispell-local-dictionary "german"))))

(add-hook 'set-language-environment-hook 'flyspell-set-language-environment)
#+END_SRC
*** Treemacs
**** Treemacs Evil window switching
#+BEGIN_SRC elisp
(map!
 (:after treemacs-evil
   (:map evil-treemacs-state-map
     "C-h" #'evil-window-left
     "C-l" #'evil-window-right)))
#+END_SRC

**** Ignore ~happypack~                                                                              :HACK:

Happypack slows down treemacs quite a bit.

#+BEGIN_SRC elisp
(defun treemacs-is-file-happypack? (f _)
  (string= f ".happypack"))

(after! treemacs
  (add-to-list 'treemacs-ignored-file-predicates #'treemacs-is-file-happypack?))
#+END_SRC

*** Workspaces
**** Config
***** Always create workspace when switching to project
#+BEGIN_SRC elisp
(setq +workspaces-on-switch-project-behavior t)
#+END_SRC
***** Always add buffers to current workspace

Doom per default adds buffers to the current workspace on ~find-file~.
I want buffers added whenever I visit a buffer.

#+BEGIN_SRC elisp
(after! persp-mode
  (setq persp-add-buffer-on-find-file nil
        persp-add-buffer-on-after-change-major-mode nil)
  (defun +workspaces|add-current-buffer ()
    (persp-add-buffer (current-buffer) (get-current-persp)))
  (add-hook 'doom-switch-buffer-hook #'+workspaces|add-current-buffer))
#+END_SRC
**** Functions
***** Switch to workspace

Enhancement of the default ~+workspace/switch-to~.

#+BEGIN_SRC elisp
(defun +workspace/my-switch-to ()
  (interactive)
  (ivy-read "Switch to workspace: "
            (+workspace-list-names)
            :action '(1
                      ("RET" +workspace/switch-to "Switch to workspace")
                      ("C-<backspace>" (lambda (x)
                                         (let* ((current-workspace-name (+workspace-current-name))
                                                (new-workspace-name
                                                 (or (--first (string= current-workspace-name it) (+workspace-list-names)) "main")))
                                           (+workspace/delete x)
                                           (+workspace-switch new-workspace-name)
                                           (+workspace/my-switch-to)))
                       "Continous delete workspace"))))
#+END_SRC
***** Switch to last visited workspace
#+BEGIN_SRC elisp
(defun +workspace/switch-to-last-visited ()
  "Switch to the last visited workspace."
  (interactive)
  (+workspace/switch-to +workspace--last))
#+END_SRC
***** Find file for workspace

Most of the time you create workspaces from a project.
But when the CWD has changed in that workspace, you would have to relocate to
the projects cwd to find a file.

#+BEGIN_SRC elisp
(defun +workspace/workspace-project-root (&optional arg)
  "Gets the root dir for the current workspace"
  (--find (s-match (concat (+workspace-current-name) "/$") it) projectile-known-projects))

(defun +workspace|find-workspace-project-file ()
"Projectile find file for the project named after the current workspace."
  (interactive)
  (cl-letf (((symbol-function 'projectile-project-root) #'+workspace/workspace-project-root))
      (projectile-find-file)))
#+END_SRC

***** New named workspace
#+BEGIN_SRC elisp
(defun +workspace/new-named ()
  "Create a new named workspace."
  (interactive)
  (let ((name (read-string "New workspace name: ")))
    (if name (+workspace/new name))))
#+END_SRC
*** Yasnippet
**** TODO Expand first company snippet
#+BEGIN_SRC elisp
(defun yasnippet/expand-first-item ()
  (interactive)
  (call-interactively #'company-yasnippet)
  (company-complete-selection))
#+END_SRC
** General Config
*** Lookup Sources
#+BEGIN_SRC elisp
(setq +lookup-provider-url-alist
  '(("DuckDuckGo"        . "https://duckduckgo.com/?q=%s")
    ("DuckDuckGo Lucky"  . "https://duckduckgo.com/?q=\\%s")
    ("Github Code"       . "https://github.com/search?search&q=%s&type=Code")
    ("Google"            . "https://google.com/search?q=%s")
    ("Google images"     . "https://google.com/images?q=%s")
    ("Google maps"       . "https://maps.google.com/maps?q=%s")
    ("NPM"               . "https://npmjs.com/search?q=%s")
    ("Hoogle"            . "https://www.haskell.org/hoogle/?hoogle=%s")
    ("Project Gutenberg" . "http://www.gutenberg.org/ebooks/search/?query=%s")
    ("DevDocs.io"        . "https://devdocs.io/#q=%s")
    ("Explain Shell"     . "https://explainshell.com/explain?cmd=%s")
    ("StackOverflow"     . "https://stackoverflow.com/search?q=%s")
    ("Github"            . "https://github.com/search?ref=simplesearch&q=%s")
    ("Youtube"           . "https://youtube.com/results?aq=f&oq=&search_query=%s")
    ("Wolfram alpha"     . "https://wolframalpha.com/input/?i=%s")
    ("Wikipedia"         . "https://wikipedia.org/search-redirect.php?language=en&go=Go&search=%s")))
#+END_SRC
*** Bookmarks
#+BEGIN_SRC elisp
(setq bookmark-default-file "~/Dropbox/Temp/bookmarks")
#+END_SRC

*** Open OTF fonts in image mode
#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.otf\\'" . image-mode))
#+END_SRC
*** Shorten Yes/No prompts
:PROPERTIES:
:SOURCE:   https://github.com/wasamasa/dotemacs/blob/master/init.org#shorten-yesno-prompts
:END:

Per default you're required to type out a full "yes" or "no" whenever
the function ~yes-or-no-p~ is invoked, let's substitute its function
definition to allow a "y" or "n" without even requiring confirmation.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Fine undo
Whether actions like "cw" are undone in several steps.

#+BEGIN_SRC elisp
(setq evil-want-fine-undo t)
#+END_SRC
*** Move items to trash on delete
#+BEGIN_SRC elisp
(setq
 trash-directory "~/.Trash/"
 delete-by-moving-to-trash t)
#+END_SRC
*** Filename Auto Modes
Automatically set mode for specifc filenames

#+BEGIN_SRC elisp
;; auto-mode-alist
(add-to-list 'auto-mode-alist '("Brewfile" . shell-script-mode))
#+END_SRC
*** Terminal Config
Set the terminal to zsh

#+BEGIN_SRC elisp
;; Set the default multi-term to zsh
(setq multi-term-program "/bin/zsh")
#+END_SRC
*** Save Hist Mode
Save the command history between sessions
The history can be accessed with ~C-n~ / ~C-p~

#+BEGIN_SRC elisp
(savehist-mode 1)
#+END_SRC
*** Automatically reload tags files
#+BEGIN_SRC elisp
(setq tags-revert-without-query 1)
#+END_SRC
*** Disable trailng whitespace error
#+BEGIN_SRC elisp
(setq-hook! 'prog-mode-hook show-trailing-whitespace nil)
#+END_SRC
** Bindings
*** General Bindings
#+BEGIN_SRC elisp
(map! :en "C-±" #'+popup/raise)
#+END_SRC
*** Osx / Mac Modifier Bindings
#+BEGIN_SRC elisp
(map!
 (:map override
   :gniv "s-w" #'+workspace/close-window-or-workspace
   :gniv "s-;" #'eval-expression
   :gniv "s-S" #'write-file
   :gniv "s-x" #'execute-extended-command

   ;; Workspace Switching
   :gniv "s-1" (λ! (+workspace/switch-to 0))
   :gniv "s-2" (λ! (+workspace/switch-to 1))
   :gniv "s-3" (λ! (+workspace/switch-to 2))
   :gniv "s-4" (λ! (+workspace/switch-to 3))
   :gniv "s-5" (λ! (+workspace/switch-to 4))
   :gniv "s-6" (λ! (+workspace/switch-to 5))
   :gniv "s-7" (λ! (+workspace/switch-to 6))
   :gniv "s-8" (λ! (+workspace/switch-to 7))
   :gniv "s-9" (λ! (+workspace/switch-to 9))

   ;; Text scale
   :gniv "s-="   #'doom/increase-font-size
   :gniv "s--"   #'doom/decrease-font-size
   :gniv "s-0"   #'doom/reset-font-size))
#+END_SRC
*** Evil Normal Bindings
**** Window navigation
#+BEGIN_SRC elisp
(map!
 :en "C-h"   #'evil-window-left
 :en "C-j"   #'evil-window-down
 :en "C-k"   #'evil-window-up
 :en "C-l"   #'evil-window-right)
#+END_SRC
**** Replace With Register Motion
#+BEGIN_SRC elisp
(def-package! evil-replace-with-register
  :config
  (setq evil-replace-with-register-key (kbd "gr"))
  (define-key evil-normal-state-map
    evil-replace-with-register-key 'evil-replace-with-register)
  (define-key evil-visual-state-map
    evil-replace-with-register-key 'evil-replace-with-register))
#+END_SRC
**** Evil Quotes/Brackets Motion

Changes the text matching inside quotes with ~q~ motion (e.g. ~ciq~)
Change inner bracket with ~r~

#+BEGIN_SRC elisp
(after! evil
  (require 'evil-textobj-anyblock)
  (evil-define-text-object my-evil-textobj-anyblock-inner-quote
    (count &optional beg end type)
    "Select the closest outer quote."
    (let ((evil-textobj-anyblock-blocks
           '(("'" . "'")
             ("\"" . "\"")
             ("`" . "'")
             ("“" . "”"))))
      (evil-textobj-anyblock--make-textobj beg end type count nil)))

  (evil-define-text-object my-evil-textobj-anyblock-a-quote
    (count &optional beg end type)
    "Select the closest outer quote."
    (let ((evil-textobj-anyblock-blocks
           '(("'" . "'")
             ("\"" . "\"")
             ("`" . "'")
             ("“" . "”"))))
      (evil-textobj-anyblock--make-textobj beg end type count t)))

  (define-key evil-inner-text-objects-map "q" 'my-evil-textobj-anyblock-inner-quote)
  (define-key evil-outer-text-objects-map "q" 'my-evil-textobj-anyblock-a-quote)
  (define-key evil-inner-text-objects-map "r" 'evil-inner-bracket))
#+END_SRC
**** Go up one directory from the current buffer
#+BEGIN_SRC elisp
(after! evil
  (map! :m  "-"  #'dired-jump))
#+END_SRC
**** Fix history navigation for the minibuffer
#+BEGIN_SRC elisp
(define-key minibuffer-local-map "\C-p" 'previous-history-element)
(define-key minibuffer-local-map "\C-n" 'next-history-element)
#+END_SRC
**** Jump to last buffer
#+BEGIN_SRC elisp
(map! :n "gb" #'evil-switch-to-windows-last-buffer)
#+END_SRC
*** Evil Square Bracket Bindings

Global ~[~ & ~]~ combinator bindings

**** Dumb Jump
#+BEGIN_SRC elisp
(map!
 :n "]F" #'dumb-jump-go
 :n "[F" #'dumb-jump-back)
#+END_SRC
**** Flycheck Error Jumping
#+BEGIN_SRC elisp
(map!
 :n "]e" #'flycheck-next-error
 :n "[e" #'flycheck-previous-error)
#+END_SRC
*** Evil Insert Bindings

Insert Mode bindings, mostly unicode insertion and workaround for german umlaut.

**** Insert from the kill ring in insert mode

#+BEGIN_SRC elisp
(map! :i "A-y" #'helm-show-kill-ring)
#+END_SRC

**** Unicode Symbols and German Umlaut

#+BEGIN_SRC elisp
(map!
 :i "M-;"   (λ! (insert "ö"))
 :i "M-:"   (λ! (insert "Ö"))
 :i "M-'"   (λ! (insert "ä"))
 :i "M-\""  (λ! (insert "Ä"))
 :i "M-["   (λ! (insert "ü"))
 :i "M-{"   (λ! (insert "Ü"))
 :i "M-s"   (λ! (insert "ß"))
 :i "M-e"   (λ! (insert "€"))
 :i "M-`"   (λ! (insert "°"))
 :i "M-."   (λ! (insert "…"))
 :i "M-^"   (λ! (insert "°"))
 :i "M-l"   (λ! (insert "λ"))
 :i "M-w"   (λ! (insert "⚠"))
 :i "M-i"   (λ! (insert "ℹ")))
#+END_SRC
***** TODO Inserting a character makes one undo state
*** Leader Bindings
#+BEGIN_SRC elisp
(map!
 :leader
 :n "'"  #'+popup/toggle
 :n "au" #'undo-tree-visualize
 :n "//" #'+default/search-project
 :n "-"  #'quick-calc

 (:desc "Toggle last iBuffer" :n "=" #'+popup/toggle))
#+END_SRC

**** Buffer
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "buffer" :prefix "b"
   :desc "Rename Buffer" :n "r" #'rename-buffer))
#+END_SRC
**** File
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "file" :prefix "f"
   :desc "find in literate config file" :n  "D" (λ! (counsel-find-file (projectile-project-root)))
   :desc "find in literate config file" :n  "p" #'counsel-org-doom-config))
#+END_SRC
**** Dir
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "dir" :prefix "d"
   :desc "find in literate config file" :n  "r" #'dired-recent-open
   :desc "Project Root"                 :n  "p" #'projectile-dired))
#+END_SRC
**** Git
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "git" :prefix "g"
   :desc "Worktree Popup"              :n "%" #'magit-worktree
   :desc "Blame"                       :n "B" #'magit-blame
   :desc "Changed Files"               :n "F" #'+git|ivy-changed-files
   :desc "New Branch"                  :n "N" #'magit-branch-spinoff
   :desc "Show revision original File" :n "O" #'magit-revision-show-original-file
   :desc "Map-editor Changed Files"    :n "T" (λ! (+git|ivy-changed-files "map-editor"))
   :desc "Amend Commit"                :n "a" #'magit-commit-amend
   :desc "Checkout"                    :n "b" #'magit-checkout
   :desc "Diff"                        :n "d" #'magit-diff
   :desc "Push"                        :n "p" #'magit-push
   :desc "Undo"                        :n "u" #'+git|undo))
#+END_SRC
**** Insert
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "insert" :prefix "i"
   :desc "Killring"   :n  "y" #'counsel-yank-pop))
#+END_SRC
**** Projects
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "project" :prefix "p"
   :desc "services" :n  "s" #'prodigy
   :desc "Workspace Project Files" :n  "P" #'+workspace|find-workspace-project-file))
#+END_SRC
**** Toggle
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "toggle" :prefix "t"
   :desc "Theme Dark/Light" :n  "t" #'+doom|toggle-theme))
#+END_SRC
**** Code
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "code" :prefix "c"
   :desc "Compile" "c" #'compile
   :desc "Compile" "Compile last command" (λ! (compile (car compile-history)))))
#+END_SRC
**** Open
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "open" :prefix "o"
   :desc "Eshell in Current Dir" :n  "." (λ! (+eshell/open t))
   :desc "Eshell Popup in Current Dir" :n  ">" (λ! (+eshell/open t))))
#+END_SRC

**** Window
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "window" :prefix "w"
  :desc  "Split Vertical"   :n  "|"    #'evil-window-vsplit
  :desc  "Split Horizontal" :n  "_"    #'evil-window-split
  :desc  "Split Horizontal" :n  "_"    #'evil-window-split
  :desc  "Set Height"       :n  "C-_"    #'evil-window-set-height
  :desc  "Set Height"       :n  "C-|"    #'evil-window-set-width
  :desc  "Swap"             :n  "SPC"  #'ace-swap-window
  :desc "Toggle Locked" :n "#" #'toggle-window-dedicated))
#+END_SRC
**** Workspace
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "workspace" :prefix "<tab>"
   :desc "Switch to"    :n "." #'+workspace/my-switch-to
   :desc "Create"       :n "c" #'+workspace/new-named
   :desc "Rename"       :n "," #'+workspace/rename
   :desc "Last visited" :n "0" #'+workspace/switch-to-last-visited
   :desc "Clone"        :n "C" (λ!
                                (+workspace/new (format "Clone: %s" (+workspace-current-name)) t)
                                (message "Cloned current workspace %s" (+workspace-current-name)))

   :desc "Display tab bar"          "TAB" #'+workspace/display
   :desc "New workspace"            "n"   #'+workspace/new
   :desc "Load workspace from file" "l"   #'+workspace/load
   :desc "Save workspace to file"   "s"   #'+workspace/save
   :desc "Switch workspace"         "."   #'+workspace/switch-to
   :desc "Delete session"           "x"   #'+workspace/kill-session
   :desc "Delete this workspace"    "d"   #'+workspace/delete
   :desc "Rename workspace"         "r"   #'+workspace/rename
   :desc "Restore last session"     "R"   #'+workspace/restore-last-session
   :desc "Next workspace"           "]"   #'+workspace/switch-right
   :desc "Previous workspace"       "["   #'+workspace/switch-left
   :desc "Switch to 1st workspace"  "1"   (λ! (+workspace/switch-to 0))
   :desc "Switch to 2nd workspace"  "2"   (λ! (+workspace/switch-to 1))
   :desc "Switch to 3rd workspace"  "3"   (λ! (+workspace/switch-to 2))
   :desc "Switch to 4th workspace"  "4"   (λ! (+workspace/switch-to 3))
   :desc "Switch to 5th workspace"  "5"   (λ! (+workspace/switch-to 4))
   :desc "Switch to 6th workspace"  "6"   (λ! (+workspace/switch-to 5))
   :desc "Switch to 7th workspace"  "7"   (λ! (+workspace/switch-to 6))
   :desc "Switch to 8th workspace"  "8"   (λ! (+workspace/switch-to 7))
   :desc "Switch to 9th workspace"  "9"   (λ! (+workspace/switch-to 8))
   :desc "Switch to last workspace" "0"   #'+workspace/switch-to-last))
#+END_SRC

**** Yank
#+BEGIN_SRC elisp
(map!
  :leader
  (:desc "Yank" :prefix "y"
    :desc "filename"  :n  "f" (λ! (copy-message (file-name-nondirectory buffer-file-name)))
    :desc "base"      :n  "b" (λ! (copy-message (file-name-base (buffer-file-name))))
    :desc "directory" :n  "d" (λ! (copy-message (file-name-directory (buffer-file-name))))
    :desc "path"      :n  "p" (λ! (copy-message (file-name-directory (buffer-file-name))))
    :desc "project"   :n  "r" (λ! (copy-message (s-replace (projectile-project-root) "" (buffer-file-name))))))
#+END_SRC

*** Little Word Motion
#+BEGIN_SRC elisp
(defun load-evil-camel-case-motion ()
  (require 'evil-little-word)
  (define-key evil-normal-state-map (kbd "M-w") 'evil-forward-little-word-begin)
  (define-key evil-normal-state-map (kbd "M-b") 'evil-backward-little-word-begin)
  (define-key evil-operator-state-map (kbd "M-w") 'evil-forward-little-word-begin)
  (define-key evil-operator-state-map (kbd "M-b") 'evil-backward-little-word-begin)
  (define-key evil-visual-state-map (kbd "M-w") 'evil-forward-little-word-begin)
  (define-key evil-visual-state-map (kbd "M-b") 'evil-backward-little-word-begin)
  (define-key evil-visual-state-map (kbd "i M-w") 'evil-inner-little-word))

(after! rjsx-mode
  (load-evil-camel-case-motion))

(after! reason-mode
  (load-evil-camel-case-motion))

(after! js2-mode
  (load-evil-camel-case-motion))
#+END_SRC
*** Package (Local-Leader) Bindings

Pacakge/Mode specific bindings

**** Org Mode
***** Local Leader Mapping
#+BEGIN_SRC elisp
(map! :map org-mode-map
      :localleader
      :desc  "Set source key to tab"    "k"  #'+org|source-properties-key-from-browser
      :desc  "Copy Buffer To Markdown"  "y"  #'+org|copy-buffer-as-markdown
      :desc  "Align Tags"               "%"  #'+org|align-all-tags
      :desc  "Goto Archive"             "$"  #'+org|visit-archive-file
      :desc  "Schedule Tomorrow"        "+"  #'+org|schedule-tomorrow
      (:prefix ("g" . "goto")
        :desc "Org Web Link" "l" #'+org-web-tools/read-url-at-point))
#+END_SRC
***** Meta Mapping
#+BEGIN_SRC elisp
(map! :niv "s-X" #'+org-capture/open-frame)

(map! :map org-mode-map
        :gni [s-return]   #'+org/insert-item-below
        :gni [s-S-return] #'+org/insert-item-above)

(map! :map outline-mode-map
      :n "s-k" #'org-metaup
      :n "s-j" #'org-metadown)
#+END_SRC
***** Agenda Mapping
****** Evil Customizations
#+BEGIN_SRC elisp
(defun my-evil-org-agenda-set-keys ()
  (evil-define-key 'motion org-agenda-mode-map
    "da" 'org-agenda-archive
    "dA" '+org|agenda-archive-and-done))

(advice-add #'evil-org-agenda-set-keys :after #'my-evil-org-agenda-set-keys)
#+END_SRC
****** Fix Window Navigation
#+BEGIN_SRC elisp
(map! :map org-agenda-mode-map
      :desc "Org Window Left" "C-h" #'evil-window-left
      :desc "Org Window Left" "C-l" #'evil-window-right)
#+END_SRC
**** Eshell
#+BEGIN_SRC elisp
(defun floscr|+eshell|init-keymap ()
  "Setup additional custom eshell keybindings to already existing doom bindings. This must be done in a hook because eshell-mode
redefines its keys every time `eshell-mode' is enabled."
  (map! :map eshell-mode-map
        :localleader "l" #'eshell/clear))
(add-hook 'eshell-first-time-mode-hook #'floscr|+eshell|init-keymap)
#+END_SRC
**** Elisp
#+BEGIN_SRC elisp
(map! :map emacs-lisp-mode-map
      ;; Rearrange Sexps
      :n "s-k"   (λ! (sp-transpose-sexp)
                     (evil-previous-line))
      :n "s-j"   (λ! (sp-push-hybrid-sexp)
                     (evil-next-line))

      ;; Eval Buffer
      :n "s-r" #'eval-buffer

      ;; Slurp and barf
      :n "g]"   #'sp-slurp-hybrid-sexp
      :n "g["   #'sp-forward-barf-sexp
      :localleader
      :desc  "Raise sexp" "<" #'raise-sexp
      :desc  "Barf Sexp" ">" #'barf-sexp)
#+END_SRC
*** Minibuffer Bindings
**** Copy and Paste from the minibuffer

Since the minibuffer has no evil mode, i've got these bindings to help out:
- ~M-c~: Copy the minibuffer line
- ~M-v~: Paste from clippboard to minibuffer (Same as ~C-r 0~)
         This also removes trailng newlines

#+BEGIN_SRC elisp
(defun evil-get-register-string (REGISTER)
  "Get evil-register pure text content
Registers can be selected with ?letter
E.g.: ?* -> Clipboard Contents"
  (evil-vector-to-string (evil-get-register REGISTER)))

(defun paste-evil-register-clipboard-pruned ()
  "Paste the current clipboard pruned from newlines"
  (interactive)
  (insert (s-trim (shell-command-to-string "pbpaste")))
  (doom/forward-to-last-non-comment-or-eol))

(defun copy-minibuffer-line ()
  "Copies the minibuffer content to the clipboard"
  (interactive)
  (save-excursion
    (doom/forward-to-last-non-comment-or-eol)
    (set-mark-command nil)
    (doom/backward-to-bol-or-indent)
    (kill-ring-save (mark) (point))))

(defun setup-minibuffer ()
  "Set up keybindings for the minibuffer"
  (local-set-key (kbd "s-v") 'paste-evil-register-clipboard-pruned)
  (local-set-key (kbd "s-c") 'copy-minibuffer-line))

(add-hook 'minibuffer-setup-hook 'setup-minibuffer)
#+END_SRC
