#+TITLE: My emacs doom configuration
#+AUTHOR: Florian Schrödl <flo.schroedl@gmail.com>
#+PROPERTY: header-args :tangle yes

* Config
** Personal Configuration

Full name and email address

#+BEGIN_SRC elisp
(setq user-full-name "Florian Schrödl"
      user-mail-address "flo.schroedl.com")
#+END_SRC

Setup GPG

#+BEGIN_SRC elisp
;; Use Emacs UI to enter the encryption key
(setenv "GPG_AGENT_INFO" nil)
(setq epa-pinentry-mode 'loopback)
#+END_SRC
** Utils
*** Macros
**** Aliases
#+BEGIN_SRC elisp
(defalias 'λ 'lambda)
#+END_SRC
**** Template Literals
Source: https://gist.github.com/cbowdon/012d623920bd28453bf8

#+BEGIN_SRC elisp :tangle no
(template "2 = <<(+ 1 1)>>")
#+END_SRC

#+RESULTS:
: 2 = 2

#+BEGIN_SRC elisp
(defmacro template (text)
  "Template literals"
  (let ((pattern "<<\\(.*?\\)>>"))
    ;; The regexp matches anything between delimiters, non-greedily
    (with-temp-buffer
      (save-excursion (insert text))
      (let ((matches '()))
        (while (re-search-forward pattern nil t)
          (push (match-string 1) matches)
          (replace-match "%s" t t))
        `(format ,(buffer-string) ,@(reverse (mapcar 'read matches)))))))
#+END_SRC
*** Delete current Buffer File
#+BEGIN_SRC elisp
(defun delete-current-buffer-file ()
  "Removes file connected to current buffer and kills buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (when (yes-or-no-p "Are you sure you want to delete this file? ")
        (delete-file filename t)
        (kill-buffer buffer)
        (when (and (configuration-layer/package-usedp 'projectile)
                   (projectile-project-p))
          (call-interactively #'projectile-invalidate-cache))
        (message "File '%s' successfully removed" filename)))))
#+END_SRC
*** Utility Functions
#+BEGIN_SRC elisp
(defun noop (args) nil)
#+END_SRC

#+BEGIN_SRC elisp
(defun do-jxa-script (cmd)
  "Run a osx javascript automation script via bash"
  (shell-command-to-string
   (concat "osascript -l 'JavaScript' -e '" cmd "'")))

;; source: https://emacsredux.com/blog/2013/06/21/eval-and-replace/
(defun eval-and-replace-sexp ()
  "Replace the preceding sexp with its value."
  (interactive)
  (right-char) ;; Fix for normal mode
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(defun copy-message (x)
  (kill-new x)
  (message "Copied to clipboard: %s" x))

(defun +doom|open-elisp-scratch-buffer ()
  "Opens a new scratch buffer in elisp mode"
  (interactive)
  (doom/open-scratch-buffer)
  (emacs-lisp-mode))
#+END_SRC
*** Math+
#+BEGIN_SRC elisp
(defun math-on-number (f &optional num)
  "Read user input and apply with function f to the number at point"
  (let* ((x (thing-at-point 'number))
         (arithmetic-symbol (pcase f
                              ('+ "+")
                              ('- "-")
                              ('/ "/")
                              ('* "*")
                              (_ (error "Unknown function %s" f))))
         (readline (concat (number-to-string x) " " arithmetic-symbol " "))
         (y (or num (read-number readline)))
         (result (funcall f x y))
         (bounds (bounds-of-thing-at-point 'evil-WORD)))
    (delete-region (car bounds) (cdr bounds))
    (insert (format "%.02f" result))))

(defun math+|add-to-number ()
  (interactive)
  (math-on-number '+))

(defun math+|subtract-from-number ()
  (interactive)
  (math-on-number '-))

(defun math+|subtract-maran-vegan ()
  (interactive)
  (math-on-number '- 8.60))

(defun math+|divide-by-number ()
  (interactive)
  (math-on-number '/))

(defun math+|multiply-by-number ()
  (interactive)
  (math-on-number '*))
#+END_SRC
*** Window Dedicated

To lock a window you set the dedicadet flag on the window.
[[https://emacs.stackexchange.com/questions/2189/how-can-i-prevent-a-command-from-using-specific-windows][buffers - How can I prevent a command from using specific windows? - Emacs Stack Exchange]]

#+BEGIN_SRC elisp
(defun toggle-window-dedicated ()
  "Control whether or not Emacs is allowed to display another
buffer in current window."
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
         (set-window-dedicated-p window (not (window-dedicated-p window))))
       "%s: Window locked!"
     "%s: Window unlocked!")
   (current-buffer)))
#+END_SRC
*** Workspace
#+BEGIN_SRC elisp
(defun +workspace/switch-to-last-visited ()
  "Switch to the last visited workspace."
  (interactive)
  (+workspace/switch-to +workspace--last))

(defun +workspace|find-workspace-project-file ()
  (interactive)
  (cl-letf (((symbol-function 'projectile-project-root) #'find-workspace-project-root))
      (projectile-find-file)))

(defun +workspace|new-named ()
  "Prompt for a name and create a workspace in that name"
  (interactive)
  (let ((name (read-string "New workspace name: ")))
    (if name (+workspace/new name))))

(defun find-workspace-project-root (&optional arg)
  "Gets the root dir for the current workspace"
  (--find (s-match (concat (+workspace-current-name) "/$") it) projectile-known-projects))
#+END_SRC
*** IO File Utilities
**** Get the last file in directory
:PROPERTIES:
:SOURCE:   https://stackoverflow.com/a/30886283
:END:

#+BEGIN_SRC elisp
(defun latest-file (path)
  (let ((e (f-entries path)))
    (car (sort e (lambda (a b)
                   (not (time-less-p (file-timestamp a)
                                     (file-timestamp b))))))))

(defun file-timestamp (f) (let ((attrs (file-attributes f))) (nth 5 attrs)))
#+END_SRC
** UI
*** System specific
#+BEGIN_SRC elisp
(defun my-frame-resize-width (width)
  "Set the frame to the displays prefered setting"
  (set-frame-width (selected-frame) width)
  (maximize-frame-vertically)
  (set-frame-position (selected-frame) (- (x-display-pixel-width) width) 0))

(defun my-frame-resize-work-external ()
  (interactive)
  (my-frame-resize-width 1410))

(cond
 ((string= system-name "Florians-MBP.localdomain")
  (setq-default line-spacing 0.3))
 ((string= system-name "Florians-iMac.local")
  (setq-default line-spacing 0.3))
 ((string= system-name "Florians-MacBook-Air.local")
  (setq-default line-spacing 0.4)
  (setq initial-frame-alist
        (append (list '(left . 272)
                      '(width . 165)
                      '(fullscreen . fullheight))
                initial-frame-alist))
  (after! helm-mode
    :config
    ;; Fix for small helm ui on small display
    (set-popup-rule! "^\\*helm" :vslot -100 :size 0.32 :ttl nil)))
 (t (setq-default line-spacing 0.15)))
#+END_SRC
*** Theme Toggle

Allows me to toggle quickly between two themes.

#+BEGIN_SRC elisp
(defconst light-theme 'doom-one)
(defconst dark-theme  'doom-one-light)

(defun +doom|toggle-theme ()
  "Toggle between light and dark themes."
  (interactive)
  (cond ((eq doom-theme dark-theme)
         (message "Toggling to light-theme: %s" light-theme)
         (setq doom-theme light-theme)
         (doom/reload-theme))
        ((eq doom-theme light-theme)
         (message "Toggling to dark-theme: %s" dark-theme)
         (setq doom-theme dark-theme)
         (doom/reload-theme))
        (t (message "Toggling theme is not possible. Theme is not currently light-theme (%s) or dark-theme (%s)." light-theme dark-theme))))
#+END_SRC
*** General UI Changes

Remove the blinking cursor.

#+BEGIN_SRC elisp
(remove-hook 'doom-init-ui-hook #'blink-cursor-mode)
(blink-cursor-mode -1)
#+END_SRC

Start scrolling X lines before the end of a screen.
Disable for terminal buffers, since there cane be issues completion/interactive
shell scripts.

#+BEGIN_SRC elisp
(setq
 scroll-conservatively 10
 scroll-margin 10)

(add-hook 'term-mode-hook (λ! (setq-local scroll-margin 0)))
#+END_SRC
*** Line Spacing

Change and reset line-spacing for all buffers.

#+BEGIN_SRC elisp
(defvar default-line-spacing 0.2)

(defun set-line-spacing (&optional spacing)
  "Set the line spacing
When no line spacing is given is the default-line-spacing"
  (if line-spacing
      (setq-default line-spacing (+ (or spacing default-line-spacing) line-spacing))
    (setq-default line-spacing (+ 0 default-line-spacing))))

(defun +ui|reset-line-spacing ()
  (interactive)
  (setq-default line-spacing nil))

(defun +ui|increase-line-spacing ()
  (interactive)
  (set-line-spacing))

(defun +ui|decrease-line-spacing ()
  (interactive)
  (set-line-spacing (- default-line-spacing)))
#+END_SRC
** Bindings
*** General Bindings
#+BEGIN_SRC elisp
(map!
 :niv "M-W" #'delete-frame

 :niv "s-1" (λ! (+workspace/switch-to 0))
 :niv "s-2" (λ! (+workspace/switch-to 1))
 :niv "s-3" (λ! (+workspace/switch-to 2))
 :niv "s-4" (λ! (+workspace/switch-to 3))
 :niv "s-5" (λ! (+workspace/switch-to 4))
 :niv "s-6" (λ! (+workspace/switch-to 5))
 :niv "s-7" (λ! (+workspace/switch-to 6))
 :niv "s-8" (λ! (+workspace/switch-to 7))
 :niv "s-9" (λ! (+workspace/switch-to 9))

 :en "C-±"   #'+popup/raise)
#+END_SRC
*** Flycheck Bindings
#+BEGIN_SRC elisp
(map!
 :n "]e" #'flycheck-next-error
 :n "[e" #'flycheck-previous-error)
#+END_SRC
*** Evil
**** Go up one directory from the current buffer
#+BEGIN_SRC elisp
(after! evil
  (map! :m  "-"  #'dired-jump))
#+END_SRC
**** Sort Lines
#+BEGIN_SRC elisp
(after! evil
  (define-key evil-visual-state-map (kbd "gS") #'evil-ex-sort))
#+END_SRC
**** Fix history navigation for the minibuffer
#+BEGIN_SRC elisp
(define-key minibuffer-local-map "\C-p" 'previous-history-element)
(define-key minibuffer-local-map "\C-n" 'next-history-element)
#+END_SRC
**** Insert Line above/below
#+BEGIN_SRC elisp
(evil-define-motion evil-motion-insert-newline-below (count)
  "Insert COUNT newlines below"
  :type line
  (save-excursion
    (dotimes (c (or count 1))
      (evil-insert-newline-below))))

(evil-define-motion evil-motion-insert-newline-above (count)
  "Insert COUNT newlines above"
  :type line
  (save-excursion
    (dotimes (c (or count 1))
      (evil-insert-newline-above))))

(after! evil
  (map! :n "[ SPC" #'evil-motion-insert-newline-above
        :n "] SPC" #'evil-motion-insert-newline-below))
#+END_SRC
**** Window navigation
#+BEGIN_SRC elisp
(map!
 :en "C-h"   #'evil-window-left
 :en "C-j"   #'evil-window-down
 :en "C-k"   #'evil-window-up
 :en "C-l"   #'evil-window-right

 ;; Fixes for treemacs window navigation
 (:after treemacs-evil
   :n "C-h" #'evil-window-left
   :n "C-l" #'evil-window-right))
#+END_SRC
**** Jump to last buffer
#+BEGIN_SRC elisp
(map! :n "gb" #'evil-switch-to-windows-last-buffer)
#+END_SRC
*** Elisp
Slurp and Barf expressions

#+BEGIN_SRC elisp
(map! :map emacs-lisp-mode-map
      :n "g]"   #'sp-slurp-hybrid-sexp
      :n "g["   #'sp-forward-barf-sexp)
#+END_SRC
*** Copy and Paste from the minibuffer

Since the minibuffer has no evil mode, i've got these bindings to help out:
- ~M-c~: Copy the minibuffer line
- ~M-v~: Paste from clippboard to minibuffer (Same as ~C-r 0~)
         This also removes trailng newlines

#+BEGIN_SRC elisp
(defun evil-get-register-string (REGISTER)
  "Get evil-register pure text content
Registers can be selected with ?letter
E.g.: ?* -> Clipboard Contents"
  (evil-vector-to-string (evil-get-register REGISTER)))

(defun paste-evil-register-clipboard-pruned ()
  "Paste the current clipboard pruned from newlines"
  (interactive)
  (insert (s-trim (shell-command-to-string "pbpaste")))
  (doom/forward-to-last-non-comment-or-eol))

(defun copy-minibuffer-line ()
  "Copies the minibuffer content to the clipboard"
  (interactive)
  (save-excursion
    (doom/forward-to-last-non-comment-or-eol)
    (set-mark-command nil)
    (doom/backward-to-bol-or-indent)
    (kill-ring-save (mark) (point))))

(defun setup-minibuffer ()
  "Set up keybindings for the minibuffer"
  (local-set-key (kbd "M-v") 'paste-evil-register-clipboard-pruned)
  (local-set-key (kbd "M-c") 'copy-minibuffer-line))

(add-hook 'minibuffer-setup-hook 'setup-minibuffer)
#+END_SRC
*** Text Scale
#+BEGIN_SRC elisp
(map!
 :niv "M-="   #'default-text-scale-increase
 :niv "M--"   #'default-text-scale-decrease
 :niv "M-0"   #'default-text-scale-reset)
#+END_SRC
*** Org Mode
#+BEGIN_SRC elisp
(map!
 :niv "M-X"   #'+org-capture/open-frame)

(map! :map outline-mode-map
      :n "M-k" #'org-metaup
      :n "M-j" #'org-metadown)
#+END_SRC
*** Unicode Symbols and German Umlaut
#+BEGIN_SRC elisp
(map!
 :i "A-;"   (λ! (insert "ö"))
 :i "A-:"   (λ! (insert "Ö"))
 :i "A-'"   (λ! (insert "ä"))
 :i "A-\""  (λ! (insert "Ä"))
 :i "A-["   (λ! (insert "ü"))
 :i "A-{"   (λ! (insert "Ü"))
 :i "A-s"   (λ! (insert "ß"))
 :i "A-e"   (λ! (insert "€"))
 :i "A-`"   (λ! (insert "°"))
 :i "A-."   (λ! (insert "…"))
 :i "A-^"   (λ! (insert "°"))
 :i "A-l"   (λ! (insert "λ"))
 :i "A-w"   (λ! (insert "⚠"))
 :i "A-i"   (λ! (insert "ℹ")))
#+END_SRC
**** TODO Inserting a character makes one undo state
*** Insert bindings

Insert from the kill ring in insert mode

#+BEGIN_SRC elisp
(map! :i "A-y" #'helm-show-kill-ring)
#+END_SRC
*** Leader Bindings
#+BEGIN_SRC elisp
(map!
 :leader
 :n "'"   #'+popup/toggle
 :n "au"   #'undo-tree-visualize
 :n "//"   #'helm-projectile-ag

 (:desc "Toggle last iBuffer" :n "=" #'+popup/toggle)

 (:desc "search" :prefix "/"
   :desc "Search project" :n  "p" #'helm-projectile-ag)

 (:desc "file" :prefix "f"
   :desc "find in literate config file" :n  "p" #'helm-org-rifle-config)

 (:desc "buffer" :prefix "b"
   :desc "Delete File" :n  "D" #'delete-current-buffer-file
   :desc "Delete File" :n  "O" #'doom/kill-matching-buffers
   :desc "Delete File" :n  "X" #'+doom|open-elisp-scratch-buffer)

 (:desc "git" :prefix "g"
   :desc "Amend Commit" :n  "a" #'magit-commit-amend
   :desc "Checkout"     :n  "b" #'magit-checkout
   :desc "Blame"        :n  "B" #'magit-blame
   :desc "New Branch"   :n  "N" #'magit-branch-spinoff)

 (:desc "insert" :prefix "i"
   :desc "Killring"   :n  "y" #'helm-show-kill-ring)

 (:desc "project" :prefix "p"
   :desc "services" :n  "s" #'prodigy
   :desc "Workspace Project Files" :n  "P" #'+workspace|find-workspace-project-file)

 (:desc "toggle" :prefix "t"
   :desc "Theme Dark/Light" :n  "t" #'+doom|toggle-theme)

 (:desc "window" :prefix "w"
   :desc "Split Vertical" :n "|" #'evil-window-vsplit
   :desc "Split Horizontal" :n "_" #'evil-window-split)

 (:desc "workspace" :prefix [tab]
   :desc "Create" :n "c" #'+workspace|new-named
   :desc "Last visited" :n "0" #'+workspace/switch-to-last-visited)

 (:desc "window" :prefix "w"
   :desc "Toggle Locked" :n "#" #'toggle-window-dedicated)

 (:desc "Yank" :prefix "y"
   :desc "filename"  :n  "f" (λ! (copy-message (file-name-nondirectory buffer-file-name)))
   :desc "base"      :n  "b" (λ! (copy-message (file-name-base (buffer-file-name))))
   :desc "directory" :n  "d" (λ! (copy-message (file-name-directory (buffer-file-name))))
   :desc "path"      :n  "p" (λ! (copy-message (file-name-directory (buffer-file-name))))
   :desc "project"   :n  "r" (λ! (copy-message (s-replace (projectile-project-root) "" (buffer-file-name))))))

#+END_SRC

*** Dumb Jump
#+BEGIN_SRC elisp
(map!
 :n "]f" #'dumb-jump-go
 :n "[f" #'dumb-jump-back)
#+END_SRC
** Work
#+BEGIN_SRC elisp
(map!
 :n "[1" #'+MM|other-file
 :n "]1" #'+MM|other-file)

(defvar +Meisterlabs-Web-mode nil)

(def-project-mode! +Meisterlabs-Web-mode
  :when (bound-and-true-p +Meisterlabs-Web-mode-enabled))

(setq projectile-project-search-path '("~/Code/Meisterlabs"))

(after! yasnippet
  :config
  (setq yas-snippet-dirs (append yas-snippet-dirs '("~/Code/Meisterlabs/Snippets"))))

(defun +MM|other-file ()
  "Toggle between component or controller"
  (interactive)
  (setq filename (file-name-nondirectory buffer-file-name))
  (setq path (file-name-directory buffer-file-name))
  (setq target (if (string= filename "component.js") "controller.js" "component.js"))
  (find-file (concat path target)))

(fset '+MM|turn-style-object-into-function
      (lambda (&optional arg)
        "Turns an object into a Style function, needs to be focused on the starting {"
        (interactive "p")
        (kmacro-exec-ring-item (quote ([?y ?s ?a ?B ?b ?i ?S ?t ?y ?l ?e escape ?l ?a ?f ?u ?n ?c ?t ?i ?o ?n ?  S-backspace ?  ?\( ?o ?p ?t ?i ?o ?n ?s ?, ?  ?R ?u ?l ?e ?s escape ?l ?l ?y ?s ?a ?B ?B ?i ?  escape ?l ?a return ?r ?e ?t ?u ?r ?n ?  escape ?l ?j ?> ?i ?\{ ?k ?$ ?% ?a return escape ?k ?a ?\; escape ?= ?= ?j ?b ?l ?%] 0 "%d")) arg)))

(defun +MM|convert-to-new-redux-style ()
  "Converts the current buffer to the new redux style"
  (interactive)
  (shell-command (template "jscodeshift --dry --print --silent --transform ~/Code/Meisterlabs/jscodeshift/redux/v5.8.0/actions-controllers.js <<(buffer-file-name)>>") (current-buffer)))

(fset 'js2r-mm-extract-props
      (lambda (&optional arg)
        "Extract function props to statement"
        (interactive "p")
        (kmacro-exec-ring-item (quote ([?c ?i ?b ?p ?r ?o ?p ?s escape ?o escape ?p ?= ?= ?^ ?i ?c ?o ?n ?s ?t ?  escape ?a escape escape ?A ?  ?= ?  ?p ?r ?o ?p ?s escape ?A ?\; escape ?b ?b ?b ?b ?  ?m ?r ?e ?e ?A ?\C-? ?, escape ?j ?b])) arg)))

(defun dated-string (name)
  (format "%s-name" (format-time-string "%m-%d")))

(defun js2r-mm-taplog ()
  "Insert tap log"
  (interactive)
  (newline-and-indent)
  (yas-lookup-snippet "Tap Console Log" 'js2-mode))


;; (defun +MM|toggle-relative()
;;   (interactive)
;;   )

;; (s-match-strings-all "\\.\\.\\/" "import { foo } from './../../foo")
;; (s-split-up-to "src/" "~/Code/Meisterlabs/mindmeister-web/src/containers/PrivateMaps/ListRow/Map/NonViewable/style.js")

;; (defun +MM|dated-branch ()
;;   "Push the current branch as a dated branch"
;;   (interactive)
;;   (let ((dated-branch (magit-get-current-branch)))

;;     )
;;   (magit-get-current-branch)
;;   )
#+END_SRC
** Packages & Modules
*** Flycheck
**** Proselint
:PROPERTIES:
:SOURCE:   https://unconj.ca/blog/linting-prose-in-emacs.html
:END:

Adds proselint checker to flycheck.
Not sure if I like this yet, seems slow and too opinionated.

To install proselint you have to install it via pip3

#+BEGIN_SRC bash :tangle no
pip3 install proselint
#+END_SRC

To enable the checker press ~SPC u C-c ! x~

#+BEGIN_SRC elisp
(after! flycheck
  :config
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
    :modes (text-mode markdown-mode gfm-mode))

  (add-to-list 'flycheck-checkers 'proselint))
#+END_SRC
**** Disable the flycheck popup during insert mode

#+BEGIN_SRC elisp
(setq-hook! 'evil-insert-state-entry-hook flycheck-display-errors-function #'noop)
(setq-hook! 'evil-insert-state-exit-hook flycheck-display-errors-function #'+syntax-checker-show-popup)
#+END_SRC

*** Evil-Snipe

Repeat snipe after further key press

#+BEGIN_SRC elisp
(setq evil-snipe-repeat-keys t)
#+END_SRC
*** Dired
**** Config

When there are two visual splits with dired buffers.
~C~ will take the other window as the copy target.

#+BEGIN_SRC elisp
(setq dired-dwim-target t)
#+END_SRC

Disable dired from opening files in a new window

#+BEGIN_SRC elisp
(put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

Kill all dired buffers with ~Q~

#+BEGIN_SRC elisp
(defun +dired|kill-dired-buffers ()
  "Kills all dired buffers
Dired creates a buffer for every directory which it visits
Which is fine since you can easily switch between visited buffers
But at some time I want to purge those buffers"
  (interactive)
  (mapc (lambda (buffer)
          (when (eq 'dired-mode (buffer-local-value 'major-mode buffer))
            (kill-buffer buffer)))
        (buffer-list)))

(map! :when (featurep! :feature evil +everywhere)
      :after dired
      :map dired-mode-map
      :n "Q" #'+dired|kill-dired-buffers)
#+END_SRC

Use ~gls~ with dired which is way faster than osx ~ls~
Must enable =dired-k-human-readable= when =-h= flag is given.
Otherwise dired comes to a grinding halt on some sizes.

#+BEGIN_SRC elisp
(after!
  dired
  :config
  (when (and IS-MAC (locate-file "gls" exec-path))
    (setq dired-listing-switches "-la -h --group-directories-first"
          dired-k-human-readable t
          insert-directory-program "gls" dired-use-ls-dired t)))
#+END_SRC
**** Bindings
***** Wdired Mode Bindings

Stay in normal mode when switching to wdired

#+BEGIN_SRC elisp
(defun flosc|wdired-change-to-wdired-mode ()
  "Simple forward to wdired-change-to-wdired-mode, but staying in normal mode."
  (interactive)
  (wdired-change-to-wdired-mode)
  (evil-normal-state)
  (forward-char))
#+END_SRC

Map ~\~ to change to wdired mode, like text mode in maggit buffers.

#+BEGIN_SRC elisp
(map! :when (featurep! :feature evil +everywhere)
      :after dired
      :map dired-mode-map
      :n "\\" #'flosc|wdired-change-to-wdired-mode)
#+END_SRC
*** Company

Sort company by occurance [[https://github.com/company-mode/company-mode/issues/52][{Proposal} Improve company-dabbrev candidate ordering · Issue #52 · company-mode/company-mode]]

#+BEGIN_SRC elisp
(setq company-transformers '(company-sort-by-occurrence)
      company-idle-delay 0.5)
#+END_SRC

Select last item of company

#+BEGIN_SRC elisp :tangle no
(defun company-select-last ()
  (interactive)
  (company-select-next (- company-candidates-length 1)))
#+END_SRC

*** Eldoc
#+BEGIN_SRC elisp
;; Always truncate ElDoc messages to one line. This prevents the echo
;; area from resizing itself unexpectedly when point is on a variable
;; with a multiline docstring.
(setq eldoc-echo-area-use-multiline-p nil)

;; Show ElDoc messages in the echo area immediately, instead of after
;; 1/2 a second.
(setq eldoc-idle-delay 0)

;; Disable eldoc mode
(global-eldoc-mode -1)
#+END_SRC
*** Git
**** Config

#+BEGIN_SRC elisp
(setq-default magit-save-repository-buffers 'dontask)

(after! magit
  :config
  (setq
   magithub-clone-default-directory "~/Code/Repositories"
   git-commit-summary-max-length 120))
#+END_SRC

**** TODO Insert message from commit history

#+BEGIN_SRC elisp :tangle no
(defun +git|commit-search-message-history ()
  "Search and insert commit message from history."
  (interactive)
  (insert (completing-read "History: "
                           ;; Remove unnecessary newlines from beginning and end.
                           (mapcar (lambda (text)
                                     (string-trim text))
                                   (ring-elements log-edit-comment-ring)))))
(defun +git|undo ()
  "Soft reset current git repo to HEAD~1."
  (interactive)
  (magit-reset-soft "HEAD~1"))
#+END_SRC

**** Revision show orignal file

Show the orginal file when visiting a revision buffer.
E.g.: When showing a diff from a commit, you may want to edit that file.

#+BEGIN_SRC elisp
(defun magit-revision-show-original-file ()
  "Show the orginal file from a revision buffer
If possible also go to the pointing line"
  (interactive)
  (when magit-buffer-file-name
    (let ((file-name magit-buffer-file-name)
          (line-number (line-number-at-pos))
          (current-line (thing-at-point 'line t)))
      (delete-other-windows)
      (find-file file-name))))
#+END_SRC

**** Helm Changed Files

Show a list of the changed files in the current branch.
For now only works on branches that were directly forked from master.

#+BEGIN_SRC elisp
(defun shell-command-to-list (cmd)
  "Split output from shell-command to list"
  (split-string (shell-command-to-string cmd) "\n" t))

(defun git-new-files ()
  (shell-command-to-list "git ls-files -om --exclude-standard"))

(defun git-modified-files (branch)
  (shell-command-to-list
   (format "git --no-pager diff --no-renames --name-only --no-merges %s master;" (magit-rev-parse "HEAD"))))

(defun git-get-changed-files (b)
    (delete-dups (append (git-modified-files b) (git-new-files))))

(defun +git|helm-changed-files ()
  (interactive)
  (helm :sources (helm-build-sync-source "Git Changed Files"
                   :candidates (git-get-changed-files "master")
                   :action (helm-make-actions
                            "Find file" (lambda (fs) (find-file (concat (projectile-project-root) fs)))
                            "Search" (lambda (fs) (helm-do-ag nil fs)))
                   :fuzzy-match t)
        :buffer "*helm git changed files"))
#+END_SRC
**** Bindings
#+BEGIN_SRC elisp
(map!
 :leader
 (:desc "Magit" :prefix "g"
   :desc "Worktree Popup" :n  "%" #'magit-worktree-popup
   :desc "Changed Files"  :n  "F" #'+git|helm-changed-files
   :desc "Fetch"          :n  "f" #'magit-fetch-popup
   :desc "Undo"           :n  "u" #'+git|undo))
#+END_SRC
*** Helm
**** Use ag as default grep search

#+BEGIN_SRC elisp
(defun projectile-switch-project-and-do-ag (project)
  "Switch to a project and do a search"
  (let ((projectile-switch-project-action 'helm-projectile-ag))
    (projectile-switch-project-by-name project)))

(after!
  helm-projectile
  :init
  (helm-projectile-define-key helm-projectile-projects-map (kbd "C-/") 'projectile-switch-project-and-do-ag))

#+END_SRC
**** TODO Helm Terminal History C-R
#+BEGIN_SRC elisp :tangle no
(defun ar/helm-helm (title candidates on-select-function)
  "Helm with TITLE CANDIDATES and ON-SELECT-FUNCTION."
  )

(defun ar/shell-send-command (command)
  "Send COMMAND to shell mode."
  ;; (assert (string-equal mode-name "Shell") nil "Not in Shell mode")
  (goto-char (point-max))
  (comint-kill-input)
  (insert command)
  (comint-send-input))

(defun split-up-to-semi-colon (s)
  "Splits a string up to the first semi-colon"
  (last (s-split-up-to ";" s 1)))

(defun opt (x y)
  "Helper function - When x is non-nil use x otherwise use y"
  (if x x y))

(defun parse-zsh-history (&optional file)
  "Read the zsh_history and parse the commands"
  (with-temp-buffer
    (insert-file-contents (opt file "~/.zsh_history") nil 0 500)
    (mapcar 'split-up-to-semi-colon
          (delete-dups
            (split-string (buffer-string) "\n")))))

(defvar +helm|zsh-history
  '((name . "Zsh History")
    (candidates-process . (lambda)))
  )

(defun +helm|zsh-history ()
  "Narrow down bash history with helm."
  (interactive)
  (helm :sources +helm|zsh-history
        :prompt  "shell command: "
        :buffer  "*helm shell history*"))

(bind-key "M-r" #'ar/helm-shell-search-history shell-mode-map)

;; Save buffer name
;; Close minibuffer
;; Switch to bufffer

#+END_SRC
*** Indium
#+BEGIN_SRC elisp
(def-package! indium
  :config
  (setq indium-chrome-executable "/Applications/Google Chrome Canary.app/Contents/MacOS/Google Chrome Canary"))
#+END_SRC
*** Prodigy
#+BEGIN_SRC elisp
(after! prodigy
  (define-key prodigy-mode-map "q" #'doom/escape)
  (define-key prodigy-mode-map "j" #'prodigy-next)
  (define-key prodigy-mode-map "k" #'prodigy-prev)
  (define-key prodigy-mode-map "G" #'prodigy-last)
  (let ((external-url (shell-command-to-string "echo -n $(ifconfig en0 | awk '$1 == \"inet\" {print \"http://\" $2}'):3001")))
    (prodigy-define-service
      :name "mindmeister-web"
      :url "localhost:3000"
      :command "npm"
      :args '("start")
      :path '("~/.nvm/versions/node/v8.8.1/bin")
      :cwd "~/Code/Meisterlabs/mindmeister-web"
      :tags '(mindmeister frontend))
    (prodigy-define-service
      :name "mindmeister-web production"
      :command "npm"
      :url external-url
      :args (list "run" "start" "PrivateMaps" "--" "--production" "--mmEndpoint" external-url)
      :path '("~/.nvm/versions/node/v8.8.1/bin")
      :cwd "~/Code/Meisterlabs/mindmeister-web"
      :tags '(mindmeister frontend production))
    (prodigy-define-service
      :name "mindmeister"
      :url "localhost:3001"
      :command "rails"
      :args '("s" "-p" "3000")
      :cwd "~/Code/Meisterlabs/mindmeister")
    (prodigy-define-service
      :name "meistercanvas"
      :url "localhost:7007"
      :command "npm"
      :args '("run" "start" "meistercanvas" "--" "--port" "7007")
      :path '("~/.nvm/versions/node/v8.8.1/bin")
      :cwd "~/Code/Meisterlabs/meistercanvas")))
#+END_SRC
*** Spelling

Flycheck with ~hunspell~ (which supports other languages better than the default ~ispell~)

With the latest brew update hunspell might be broken, here is how you fix it:

#+BEGIN_SRC bash :tangle no
ln -fs /usr/local/opt/readline/lib/libreadline.8.0.dylib /usr/local/opt/readline/lib/libreadline.7.dylib
#+END_SRC


#+BEGIN_SRC elisp
(defun +flyspell|save-word ()
  "Save the current word to dictionary"
  (interactive)
  (let* ((current-location (point))
         (word (flyspell-get-word)))
    (when (consp word)
      (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

(after! flyspell
  (cond
   ((executable-find "hunspell")

    ;; For the switching, "german" has to be also in this alist
    (add-to-list 'ispell-hunspell-dict-paths-alist (list "german" (expand-file-name "~/Library/Spelling/de_AT.aff")))

    (setq ispell-program-name "hunspell"
          ispell-local-dictionary "en_US"
          ispell-really-hunspell t
          ispell-local-dictionary-alist
                  ;; Please note the list `("-d" "en_US")` contains ACTUAL parameters passed to hunspell
                  ;; You could use `("-d" "en_US,en_US-med")` to check with multiple dictionaries
                  '(("english" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "personal,en_US") nil utf-8)
                    ("german"  "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "personal,de_AT") nil utf-8))))))

(defun flyspell-set-language-environment ()
  "Change flyspell language based on the language environment"
  (cond
   ((string= "English" current-language-environment)
    (setq ispell-local-dictionary "english"))
   ((string= "German" current-language-environment)
    (setq ispell-local-dictionary "german"))))

(add-hook 'set-language-environment-hook 'flyspell-set-language-environment)
#+END_SRC
*** Replace With Register
#+BEGIN_SRC elisp
(def-package! evil-replace-with-register
  :config
  (setq evil-replace-with-register-key (kbd "gr"))
  (evil-replace-with-register-install))
#+END_SRC
*** Blimp
#+BEGIN_SRC elisp
(def-package! blimp
  :config
  (add-hook 'image-mode-hook 'blimp-mode))
#+END_SRC
*** Lookup
#+BEGIN_SRC elisp
(setq +lookup-provider-url-alist
  '(("DuckDuckGo"        . "https://duckduckgo.com/?q=%s")
    ("Github Code"       . "https://github.com/search?search&q=%s&type=Code")
    ("Google"            . "https://google.com/search?q=%s")
    ("Google images"     . "https://google.com/images?q=%s")
    ("Google maps"       . "https://maps.google.com/maps?q=%s")
    ("NPM"               . "https://npmjs.com/search?q=%s")
    ("Hoogle"            . "https://www.haskell.org/hoogle/?hoogle=%s")
    ("Project Gutenberg" . "http://www.gutenberg.org/ebooks/search/?query=%s")
    ("DevDocs.io"        . "https://devdocs.io/#q=%s")
    ("StackOverflow"     . "https://stackoverflow.com/search?q=%s")
    ("Github"            . "https://github.com/search?ref=simplesearch&q=%s")
    ("Youtube"           . "https://youtube.com/results?aq=f&oq=&search_query=%s")
    ("Wolfram alpha"     . "https://wolframalpha.com/input/?i=%s")
    ("Wikipedia"         . "https://wikipedia.org/search-redirect.php?language=en&go=Go&search=%s")))
#+END_SRC
*** Smerge Mode
#+BEGIN_SRC elisp
(after! smerge-mode
  :config
  ;; TODO This is broken after switching the theme but works for now
  ;; This fixes the smerge diff color is really bright an ugly
  (set-face-attribute 'smerge-refined-added nil :foreground nil :background nil))
#+END_SRC
*** Workspaces
#+BEGIN_SRC elisp
;; Always create workspace when switching to project
(setq +workspaces-on-switch-project-behavior t)
#+END_SRC
*** Nov (Epub Reading Mode)

Adds epub reading mode
[[https://github.com/wasamasa/nov.el][wasamasa/nov.el: Major mode for reading EPUBs in Emacs]]

I want to keep the buffer centered, but let nov take care of breaking the text,
since this is much nicer then ~visual-line-mode~.

#+BEGIN_SRC elisp
(defun my-nov-config ()
  (setq line-spacing 5)
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif" :height 1.4)
  (setq visual-fill-column-center-text t)
  (setq visual-fill-column-width (+ nov-text-width 25))
  (visual-fill-column-mode t))

(def-package! nov
  :defer t
  :init
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
  (setq nov-text-width 75)
  :config
  (progn
    (add-hook 'nov-mode-hook 'my-nov-config)))
#+END_SRC

The font can be installed via brew cask.

#+BEGIN_SRC bash :tangle no
brew tap homebrew/cask-fonts
brew cask install font-liberation-sans
#+END_SRC
*** TODO Org Noter

[[https://github.com/weirdNox/org-noter][Org Noter]] is a tool to annotate pdfs.

**** Disable Org Noter keybindings

#+BEGIN_SRC elisp
(setq org-noter-notes-mode-map (make-sparse-keymap))
#+END_SRC

**** TODO Create custom bindings to insert a note

This overrides my insert subheading keybinding

#+BEGIN_SRC elisp :tangle no
(after! org
  (def-package! org-noter
    :config
    (map!
     :leader
     (:prefix "m"
       :desc "Org-noter-insert" :n "i" #'org-noter-insert-note))))
#+END_SRC
** Languages
*** Javascript
#+BEGIN_SRC elisp
(setq
 flycheck-javascript-eslint-executable (executable-find "eslint_d")
 flycheck-disabled-checkers '(javascript-jshint javascript))

(after! rjsx-mode
  (add-hook 'js2-mode-hook #'eslintd-fix-mode))
(after! js2-mode
  (add-hook 'js2-mode-hook #'eslintd-fix-mode)
  :config
  (map! :map js2-mode-map
        :localleader
        (:desc "Indium" :prefix "i"
          :desc "Reload" :n  "r" #'indium-reload
          :desc "Start" :n  "s" #'indium-connect)))

(defun remove-js-ext (f)
  "Remove js extension from string"
  (replace-regexp-in-string "\.js$" "" f))

(defun buffer-file-name-relative ()
  "Extranct the filename with extension from path"
  (replace-regexp-in-string (file-name-directory buffer-file-name) "" (buffer-file-name)))

(defun match-const-function-name (line)
  "Matches a line to the word after the declaration"
  (nth 2 (s-match
          "\\(const\\|let\\|class\\)\s\\(.+?\\)\s"
          line)))

(defun const-function-at-point ()
  "Returns the current function name at the current line"
  (match-const-function-name (thing-at-point 'line t)))

(defun js2r-export-default ()
  "Exports the current declaration at the end of the file"
  (interactive)
  (save-excursion
    (let* ((name (const-function-at-point)))
      (goto-char (point-max))
      (insert "\n")
      (insert (template "export default <<name>>;")))))

(defun js2r-extract-const-to-file ()
  "Extracts function to external file"
  (interactive)
  (let* ((name (const-function-at-point))
         (path (concat "./" name ".js")))
    (evil-digit-argument-or-evil-beginning-of-line)
    (js2r-kill)
    (f-write-text "" 'utf-8 path)
    (find-file path)
    (yank)))

(defun js-index-file-names ()
  "Get filenames from current buffers directory"
  (let ((fs (directory-files default-directory nil ".*\\.js")))
    (mapcar 'remove-js-ext
            (remove (buffer-file-name-relative) fs))))

(defun +js|generate-index ()
  "Generate an index import file for files in directory"
  (interactive)
  (erase-buffer)
  (let* ((fs (js-index-file-names)))
    (mapc (lambda (f) (insert "import " f " from './" f "';\n")) fs)
    (insert "\n")
    (insert "export default {\n")
    (mapc (lambda (f) (insert "    " f ",\n")) fs)
    (insert "};")))

(defun js2r-sexp-to-template-string ()
  "Wrap sexp into a template string"
  (interactive)
  (kill-sexp)
  (insert (concat "`${" (substring-no-properties (car kill-ring)) "}`"))
  (pop kill-ring))

(defun +js|load-evil-camel-case-motion ()
  (require 'evil-little-word)
  (define-key evil-normal-state-map (kbd "A-w") 'evil-forward-little-word-begin)
  (define-key evil-normal-state-map (kbd "A-b") 'evil-backward-little-word-begin)
  (define-key evil-operator-state-map (kbd "A-w") 'evil-forward-little-word-begin)
  (define-key evil-operator-state-map (kbd "A-b") 'evil-backward-little-word-begin)
  (define-key evil-visual-state-map (kbd "A-w") 'evil-forward-little-word-begin)
  (define-key evil-visual-state-map (kbd "A-b") 'evil-backward-little-word-begin)
  (define-key evil-visual-state-map (kbd "i A-w") 'evil-inner-little-word))

(after! rjsx-mode
  (+js|load-evil-camel-case-motion))

(after! js2-mode
  (+js|load-evil-camel-case-motion))
#+END_SRC
*** Org
**** Utils
***** TODO Archive all done tasks
#+BEGIN_SRC elisp :tangle no
(defun my-archive-entry ()
  (message "%s" (thing-at-point 'line t)))

(defun +org|org-archive-done-tasks ()
  (interactive)
  (org-map-entries #'my-archive-entry "/[X]" 'tree))

(defun +org|org-archive-done-task ()
  (interactive)
  (org-map-entries (lambda (file) (message file)) "/[X]" 'file))

#+END_SRC
***** Grab Tablist from Chrome
#+BEGIN_SRC elisp
(defun +org|grab-tabs ()
  "Grab all the chrome tabs as an org list to save for later inspection"
  (interactive)
  (let ((tabs
         (do-jxa-script
          (concat
           "Application(\"Chrome\").windows[0].tabs()"
           ".map(tab => `"
           "- [[${tab.url()}][${tab.title()}]]"
           "`)"
           ".join(\"\\n\")"))))
    (insert tabs)))
#+END_SRC
***** Paste Chrome Link Fix

Fixes wrong paste behaviour where the link would be inserted directly on the character by adding a space

E.g.: (Brackets signal the cursor position)

: **[*]
: ***[]"

#+BEGIN_SRC elisp
(defun +org|paste-chrome-link ()
  "Paste the frontmost chrome link"
  (interactive)
  (unless (looking-at-p "[\s\t\n\r]") (forward-char))
  (insert " ")
  (insert (org-mac-chrome-get-frontmost-url)))
#+END_SRC
***** Sort org entries
#+BEGIN_SRC elisp
(defun +org|sort-entries ()
  "Go to header and sort entries"
  (interactive)
  (org-up-element)
  (org-sort)
  (org-shifttab)
  (org-cycle))
#+END_SRC
***** Copy block to clipboard
#+BEGIN_SRC elisp
(defun +org|copy-block ()
  "Copies the current block to clipboard"
  (interactive)
  (org-edit-src-code)
  (clipboard-kill-ring-save (point-min) (point-max)))
#+END_SRC
***** TODO Org Web Tools at point
#+BEGIN_SRC elisp
(defun +org-web-tools-dwim-at-point ()
  "Pass url to web tools from either:
1. An org link under the cursor
2. An url in the clipboard"
  (interactive)
  (let ((org-url (org-element-property :raw-link (org-element-context)))
        (clipboard-url (current-kill 0)))
    (if org-url
        (message "Reading org url from thing at point")
        (org-web-tools-read-url-as-org org-url)
      (if (string-match url-handler-regexp clipboard-url)
          (message "Reading org url from clipboard")
          (org-web-tools-read-url-as-org clipboard-url)
        (message "No url found")))))
#+END_SRC

***** Paste Markdown as org
#+BEGIN_SRC elisp
(defun +org|paste-markdown-as-org ()
  "Convert the current clipboard to markdown"
  (interactive)
  (insert (shell-command-to-string "pbpaste | pandoc -f markdown -t org")))
#+END_SRC
***** Ocaml Refmt to Reason
#+BEGIN_SRC elisp
(defun +org|org-src-block-refmt-reason-ocaml-toggle ()
  "Convert the current src block from ocaml to reason and vice versa"
  (interactive)
  (save-excursion
    (let* ((old-block (org-element-at-point))
           (old-lang (org-element-property :language old-block))
           (new-lang (if (string= old-lang "ocaml") "reason" "ocaml"))
           (formatter (if (string= old-lang "ocaml") 'refmt-region-ocaml-to-reason 'refmt-region-reason-to-ocaml)))
      (org-edit-special)
      (funcall formatter (point-min) (point-max))
      (org-edit-src-exit)
      (let* ((new-block (org-element-at-point))
             (new-block-parsed (org-element-interpret-data (org-element-put-property (org-element-at-point) :language new-lang)))
             (from (org-element-property :begin new-block))
             (to (org-element-property :end new-block)))
        (delete-region from to)))))
#+END_SRC
**** Reading List
#+BEGIN_SRC elisp :tangle no
(defun org-reading-list ()
  (interactive)
  (org-ql-agenda org-reading-list
    (and (tags "TEXT")
         (level 2))
    :super-groups ((:todo "NEXT")
                   (:todo "ACTIVE"))))

(org-reading-list)
#+END_SRC
**** Config Rifle
#+BEGIN_SRC elisp
(defun helm-org-rifle-config ()
  "Rifle for the literate configuration file"
  (interactive)
  (helm-org-rifle-files (list +literate-config-file)))
#+END_SRC
**** Org Attach Screenshot
#+BEGIN_SRC elisp
(defcustom screenshot-dir "~/Pictures/Screenshots"
  "Directory containing your screenshots."
  :type 'string)

(defun +org-attach/last-screenshot ()
  "Attaches the last screenshot"
  (interactive)
  (+org-attach/file (latest-file screenshot-dir)))
#+END_SRC
**** Config
***** General Config
****** Add Org Habit
Org habit is needed for ~org-ql~

#+BEGIN_SRC elisp
(add-to-list 'org-modules 'org-habit t)
#+END_SRC
****** Todo Keywords
#+BEGIN_SRC elisp
(after! org
  :config
  (setq org-todo-keywords
        '((sequence "[ ](t)" "|" "[X](x)")
          (sequence "TODO(T)" "ACTIVE(a)" "|" "DONE(X)")
          (sequence "NEXT(n)" "WAITING(w)" "LATER(l)" "SOMEDAY(s)" "|" "CANCELLED(c)")
          (sequence "PROJECT(p)"))))
#+END_SRC
****** Projectile Ignore

#+BEGIN_SRC elisp
(after! projectile
  (add-to-list 'projectile-globally-ignored-file-suffixes ".org_archive")
  (add-to-list 'projectile-globally-ignored-file-suffixes ".DS_Store"))
#+END_SRC

****** Org variables

#+BEGIN_SRC elisp
(setq
 org-directory (expand-file-name "~/Dropbox/org")
 org-pinboard-dir org-directory
 org-pinboard-file (concat org-pinboard-dir "/Bookmarks/bookmarks.org")
 org-pinboard-archive-file (concat org-pinboard-dir "/Bookmarks/.archive/pinboard.org")
 org-default-notes-file (concat org-directory "/inbox.org")
 org-shopping-list-file (concat org-directory "/shoppinglist.org")
 org-reading-list (concat org-directory "/reading-list.org"))

(after! org
  :config
  (setq
   org-image-actual-width 600
   org-default-notes-file (concat org-directory "/inbox.org")))
#+END_SRC

***** Export
#+BEGIN_SRC elisp
(defun +org|copy-subtree-as-markdown ()
  "Copy the current subtree as markdown to clipboard"
    (interactive)
    (let* ((org-export-with-toc nil)
           (md (org-md-export-as-markdown nil t)))
      (kill-ring-save (point-min) (point-max))
      (kill-buffer md)))
#+END_SRC
***** Tags

Persistent list of tags and tag shortcuts.

Not sure yet if the shortcuts work for me.
Maybe just try persistent tags.

#+BEGIN_SRC elisp
(setq
 org-tag-persistent-alist '(("ACCESABILTY"))
 org-tag-alist '(("CSS" . ?c)
                 ("DESIGN" . ?d)
                 ("EMACS" . ?e)
                 ("GUIDE" . ?g)
                 ("HASKELL" . ?h)
                 ("JAVASCRIPT" . ?j)
                 ("LEISURE" . ?l)
                 ("MATH" . ?m)
                 ("REASON_ML" . ?r)
                 ("REPOSITORY". ?R)
                 ("WORK" . ?w)))
#+END_SRC

***** Refile Targets

#+BEGIN_SRC elisp
(defun expand-org-file-names (xs)
  (mapcar (λ (x) (expand-file-name x org-directory)) xs))

(setq level-1-refile-targets (expand-org-file-names '("reading-list.org"
                                                      "cooking.org"
                                                      ;; "books.org"
                                                      "programming.org"
                                                      "shoppinglist.org")))

(setq max-level-2-refile-targets (expand-org-file-names '("Emacs.org"
                                                          "art.org"
                                                          "diary"
                                                          "games.org"
                                                          "hardware.org"
                                                          "home.org"
                                                          "inbox.org"
                                                          "mealplan.org"
                                                          "misc.org"
                                                          "movies.org"
                                                          "music.org"
                                                          "osx.org"
                                                          "personal.org"
                                                          "podcasts.org"
                                                          "projects.org"
                                                          "sleep.org"
                                                          "sports.org"
                                                          "travel.org"
                                                          "Work/work.org")))

(defun level-1-refile-targets () level-1-refile-targets)

(defun max-level-2-refile-targets () max-level-2-refile-targets)

(after! org
  :config
  (setq org-refile-targets (quote ((nil :maxlevel . 5)
                                   (max-level-2-refile-targets :maxlevel . 2)
                                   (level-1-refile-targets :level . 1)))
        org-agenda-refile org-agenda-files))
#+END_SRC
***** Journal
#+BEGIN_SRC elisp
(defvar org-journal-dir-default "~/Dropbox/org/journal")
(defvar org-journal-dir-diary "~/Dropbox/org/diary")

(setq org-journal-dir org-journal-dir-default)
(setq org-journal-file-format "%Y-%m-%d")
(setq org-journal-date-prefix "#+TITLE: ")
(setq org-journal-date-format "%A, %B %d %Y")
(setq org-journal-time-prefix "* ")
(setq org-journal-time-format "")
#+END_SRC
***** Capture Templates
#+BEGIN_SRC elisp
(defun org-capture-bookmark-pair ()
    (split-string (org-as-mac-chrome-get-frontmost-url) "::split::"))

(defun org-capture-bookmark-string-url ()
    (car (org-capture-bookmark-pair)))

(defun org-capture-bookmark-string-description ()
    (cadr (org-capture-bookmark-pair)))

(setq org-capture-templates
      `(("t" "todo" entry (file+headline org-default-notes-file "INBOX")
         "* TODO %?\n%U")
        ("e" "Event (Calendar)" entry (file+headline ,(concat org-directory "/home.org") "Calendar")
         "* %?\n%U")
        ("c" "Chrome" entry (file+headline org-default-notes-file "INBOX")
         "* %(org-mac-chrome-get-frontmost-url)%?\n%U")
        ("b" "bookmark" entry (file+headline org-pinboard-file "Pinboard")
         "* %(org-capture-bookmark-string-description)%?\n:PROPERTIES:\n:URL:  %(org-capture-bookmark-string-url)\n:TIME: %U\n:END:")
        ("w" "work" entry (file+headline ,(concat org-directory "/Work/work.org") "Todo ")
         "* TODO %?\n%U")))
#+END_SRC
***** TODO Src Block Snippets

Solve these with yasnippet

#+BEGIN_SRC elisp :tangle no
(add-to-list 'org-structure-template-alist '("es" "#+BEGIN_SRC elisp\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("E" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE"))
(add-to-list 'org-structure-template-alist '("j" "#+BEGIN_SRC js\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("ps" "#+BEGIN_SRC purescript\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("b" "#+BEGIN_SRC bash\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("re" "#+BEGIN_SRC reason\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("oc" "#+BEGIN_SRC ocaml\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("rb" "#+BEGIN_SRC ruby\n?\n#+END_SRC\n"))
(add-to-list 'org-structure-template-alist '("md" "#+BEGIN_SRC markdown\n?\n#+END_SRC\n"))
#+END_SRC

***** TODO Bookmarks
These can be solved with a lambda and dont need extra functions
#+BEGIN_SRC elisp
(defun org-find-file (f)
  "Find file in org directory"
  (find-file (concat org-directory f)))

(defun +org|org-open-home-file ()
  "Open the home org file"
  (interactive)
  (org-find-file "/home.org"))

(defun +org|org-open-reading-list-file ()
  "Open the reading list org file"
  (interactive)
  (org-find-file "/reading-list.org"))

(defun +org|org-open-work-file ()
  "Open the home org file"
  (interactive)
  (org-find-file "/Work/work.org"))
#+END_SRC

***** Leader Bindings
#+BEGIN_SRC elisp
(map! :leader (
               :desc "Notes" :prefix "n"
               :desc "Home" :n  "h" #'+org|org-open-home-file
               :desc "Reading List" :n  "r" #'+org|org-open-reading-list-file
               :desc "Inbox" :n  "i" (λ! (find-file (concat org-directory "/inbox.org")))
               :desc "Work" :n  "w" #'+org|org-open-work-file
               :desc "Agenda" :n  "a" #'org-agenda
               :desc "Store Link" :n  "y" #'org-store-link
               :desc "Save All Org Buffers" :n  "S" #'org-save-all-org-buffers))
#+END_SRC
***** General Bindings
#+BEGIN_SRC elisp
(after! org
  (map! :map evil-org-mode-map
        :n "M-j" #'org-move-subtree-down
        :n "M-k" #'org-move-subtree-up

        :localleader
        :desc "Archive Subtree"   :m "a" #'org-archive-subtree
        :desc "Paste Chrome Link" :m "p" #'+org|paste-chrome-link
        :desc "Grab tabs"         :m "P" #'+org|grab-tabs
        :desc "Cut Subtree"       :m "C" #'org-cut-subtree
        :desc "Paste Subtree"     :m "P" #'org-paste-subtree
        :desc "Sort Entries"      :m "S" #'+org|sort-entries

        :desc "Create/Edit Todo"  :nve "o" #'org-todo
        :desc "Schedule"          :nve "s" #'org-schedule
        :desc "Deadline"          :nve "d" #'org-deadline
        :desc "Refile"            :nve "r" #'org-refile
        :desc "Filter"            :nve "f" #'org-match-sparse-tree
        :desc "Tag heading"       :nve "t" #'org-set-tags-command

        (:desc "Insert" :prefix "i"
          :desc "Subheadeing" :m "s" (λ!
                                      (call-interactively 'org-insert-subheading)
                                      (evil-insert-state))
          :desc "Inavtive Timestamp" :m "i" 'org-time-stamp-inactive)
        (:desc "Narrow" :prefix "n"
          :desc "Subtree" :m "s" #'org-narrow-to-subtree
          :desc "Block"   :m "b" #'org-narrow-to-block
          :desc "Element" :m "e" #'org-narrow-to-element
          :desc "widen"   :m "w" #'widen)))
#+END_SRC
***** Agenda
****** Bindings
#+BEGIN_SRC elisp
(evil-define-key 'motion org-agenda-mode-map
  "vd" 'org-agenda-day-view
  "ds" 'org-agenda-schedule
  "vw" 'org-agenda-week-view
  "vm" 'org-agenda-month-view
  "vy" 'org-agenda-year-view)
#+END_SRC
****** Custom Agenda Commands

#+BEGIN_SRC elisp
(after! org-agenda
  (add-to-list 'org-agenda-custom-commands
               '("p" "Personal" agenda ""
                 ((org-agenda-ndays 5)
                  (org-agenda-span 7)
                  (org-agenda-tag-filter-preset '("-WORK" "-REPEATING"))
                  (tags-todo "-\[X\]")
                  (tags-todo "-DONE")
                  (org-agenda-start-on-weekday nil)
                  (org-agenda-time-grid nil)
                  (org-agenda-day-view)
                  (org-agenda-repeating-timestamp-show-all t))))
  (add-to-list 'org-agenda-custom-commands
               '("w" "Work" tags-todo "+WORK"))
  (add-to-list 'org-agenda-custom-commands
               '("rr" "Reading List" tags-todo "+TEXT"))
  (add-to-list 'org-agenda-custom-commands
               '("c" "Calendar" agenda ""
                 ((org-agenda-span 7)
                  (org-agenda-start-on-weekday nil)
                  (org-agenda-start-day "-1d")
                  (org-agenda-tag-filter-preset '("+CALENDAR")))))


  :config
  (setq org-agenda-start-on-weekday 1
        org-agenda-files (list org-directory
                               (concat org-directory "/Work"))))
#+END_SRC

Helper to reset the org agenda custom commands.

#+BEGIN_SRC elisp :tangle no
(setq org-agenda-custom-commands '())
#+END_SRC
*** Reason
#+BEGIN_SRC elisp
(defun rtop ()
  "Launch reason version of utop"
  (interactive)
  (cl-letf ((utop-command "rtop -emacs"))
    (utop)))

(def-package! reason-mode
  :mode "\\.rei?$"
  :commands (reason-mode)
  :config
  ;; Merlin eldoc is very slow with marking the whole type region
  ;; Just trigger it via C-c C-t
  (setq merlin-eldoc-doc nil)
  (let* (
         (refmt-bin (executable-find "refmt"))
         (merlin-bin (executable-find "ocamlmerlin"))
         (merlin-base-dir (when merlin-bin
                            (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
    ;; Add npm merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
    (when merlin-bin
      (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
      (setq merlin-command merlin-bin))

    (when refmt-bin
      (setq refmt-command refmt-bin))
    (require 'merlin)
    (add-hook! reason-mode
        (add-hook 'before-save-hook #'refmt-before-save nil t)
        (merlin-mode))
    (setq-hook! reason-mode
        indent-region-function #'apply-refmt)
    (set-electric! 'some-mode :chars '(?|))
    (set-lookup-handlers! 'reason-mode
                          :definition #'merlin-locate
                          :references #'merlin-occurrences
                          :documentation #'merlin-document)
    (set-company-backend! 'reason-mode 'merlin-company-backend)))
#+END_SRC
*** Markdown

Always keep markdown centered, without line numbers.

#+BEGIN_SRC elisp
(def-package! markdown-mode
  :init
  (setq markdown-fontify-code-blocks-natively t)
  :config
  (add-hook! markdown-mode
    (visual-line-mode)
    (visual-fill-column-mode)
    (outline-minor-mode)
    (setq visual-fill-column-width 90
          display-line-numbers nil)
    (setq line-spacing 2
          fill-column 80))

  (map! (:map markdown-mode-map
          :n "<"    #'markdown-promote
          :n ">"    #'markdown-demote)))
#+END_SRC
** General Config
*** Shorten Yes/No prompts
:PROPERTIES:
:SOURCE:   https://github.com/wasamasa/dotemacs/blob/master/init.org#shorten-yesno-prompts
:END:

Per default you're required to type out a full "yes" or "no" whenever
the function ~yes-or-no-p~ is invoked, let's substitute its function
definition to allow a "y" or "n" without even requiring confirmation.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Fine undo
Whether actions like "cw" are undone in several steps.

#+BEGIN_SRC elisp
(setq evil-want-fine-undo t)
#+END_SRC

*** Move items to trash on delete

#+BEGIN_SRC elisp
(setq
 trash-directory "~/.Trash/"
 delete-by-moving-to-trash t)
#+END_SRC

*** Filename Auto Modes

Automatically set mode for specifc filenames

#+BEGIN_SRC elisp
;; auto-mode-alist
(add-to-list 'auto-mode-alist '("Brewfile" . shell-script-mode))
#+END_SRC

*** Terminal Config
Set the terminal to zsh

#+BEGIN_SRC elisp
;; Set the default multi-term to zsh
(setq multi-term-program "/bin/zsh")
#+END_SRC

*** Save Hist Mode
Save the command history between sessions
The history can be accessed with ~C-n~ / ~C-p~

#+BEGIN_SRC elisp
(savehist-mode 1)
#+END_SRC

*** Automatically reload tags files

#+BEGIN_SRC elisp
(setq tags-revert-without-query 1)
#+END_SRC
** Hacks
*** Fix ~org-insert-link~
#+BEGIN_SRC elisp
(advice-remove #'org-insert-link #'+popup*hide-org-links-popup)
#+END_SRC
